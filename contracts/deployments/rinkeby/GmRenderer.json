{
  "address": "0x1394e7948C8B60Ed7370F4C5D17eF1864518985D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICorruptionsFont",
          "name": "fontAddress",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData1Address",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData2Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "imageName",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "compressedImage",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "compressedSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct GmDataInterface.GmDataSet",
          "name": "gmData",
          "type": "tuple"
        }
      ],
      "name": "decompress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        }
      ],
      "name": "svgRaw",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cce6b9c4f10d56eeb139dadc9a40d1d15604f0b6e61de7efc512dfa929e46fa",
  "receipt": {
    "to": null,
    "from": "0x63588d293313b413d8bBCdAF618D4Fee12D43e87",
    "contractAddress": "0x1394e7948C8B60Ed7370F4C5D17eF1864518985D",
    "transactionIndex": 23,
    "gasUsed": "2369776",
    "logsBloom": "0x
    "blockHash": "0x192abad7738b5add5b637decb28a4a01b37feed07c928557cbef4b6925eeb7c1",
    "transactionHash": "0x0cce6b9c4f10d56eeb139dadc9a40d1d15604f0b6e61de7efc512dfa929e46fa",
    "logs": [],
    "blockNumber": 9896471,
    "cumulativeGasUsed": "6022276",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFd6D660Eaa86f65b859631D70897E1b2c391792F",
    "0x32651619c1cA8aA3a372f13Daa829D131dE92a19",
    "0xdd62387516437E814575D003C4874dF638A318a4"
  ],
  "solcInputHash": "fa1e5bf847c40fe5893b9b66ec44a2d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICorruptionsFont\",\"name\":\"fontAddress\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData1Address\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"imageName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"compressedImage\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"compressedSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GmDataInterface.GmDataSet\",\"name\":\"gmData\",\"type\":\"tuple\"}],\"name\":\"decompress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"svgRaw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GmRenderer.sol\":\"GmRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"contracts/GmDataInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface GmDataInterface {\\n    struct GmDataSet {\\n        bytes imageName;\\n        bytes compressedImage;\\n        uint256 compressedSize;\\n    }\\n\\n    function getSvg(uint256 index) external pure returns (GmDataSet memory);\\n}\\n\",\"keccak256\":\"0x4aa3627511d193a62d7e629cc8c25bed6388e6c732ca5ba8df6b2058ebbbe064\",\"license\":\"MIT\"},\"contracts/GmRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {InflateLib} from \\\"./InflateLib.sol\\\";\\nimport {GmDataInterface} from \\\"./GmDataInterface.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\ninterface ICorruptionsFont {\\n    function font() external view returns (string memory);\\n}\\n\\ncontract GmRenderer {\\n    ICorruptionsFont private immutable font;\\n    GmDataInterface private immutable gmData1;\\n    GmDataInterface private immutable gmData2;\\n\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    struct Hsl {\\n        uint32 h1;\\n        uint32 s1;\\n        uint32 l1;\\n        uint32 h2;\\n        uint32 s2;\\n        uint32 l2;\\n    }\\n\\n    constructor(\\n        ICorruptionsFont fontAddress,\\n        GmDataInterface gmData1Address,\\n        GmDataInterface gmData2Address\\n    ) {\\n        font = fontAddress;\\n        gmData1 = gmData1Address;\\n        gmData2 = gmData2Address;\\n    }\\n\\n    function decompress(GmDataInterface.GmDataSet memory gmData)\\n        public\\n        pure\\n        returns (bytes memory, bytes memory)\\n    {\\n        (, bytes memory inflated) = InflateLib.puff(\\n            gmData.compressedImage,\\n            gmData.compressedSize\\n        );\\n        return (gmData.imageName, inflated);\\n    }\\n\\n    function _getHsl(bytes32 seed) pure internal returns (Hsl memory) {\\n        uint32 hue1 = uint32(bytes4(seed)) % 360;\\n        uint32 hue2 = uint32(bytes4(seed << 32)) % 360;\\n        uint32 s1 = (uint32(bytes4(seed << 64)) % 89) + 22;\\n        uint32 s2 = (uint32(bytes4(seed << 96)) % 98) + 22;\\n\\n        uint32 high = (uint32(bytes4(seed << 128))) % 2;\\n\\n\\n        uint32 lightnessAddend = ((uint32(bytes4(seed << 128))) % 20);\\n\\n        uint32 lightness1;\\n        if (high == 0) {\\n            lightness1 = 20 + lightnessAddend;\\n        } else {\\n            lightness1 = 60 + lightnessAddend;\\n        }\\n\\n\\n        uint32 lightness2 = 100 - lightness1;\\n        return Hsl(hue1, s1, lightness1, hue2, s2, lightness2);\\n    }\\n\\n    function svgRaw(uint256 tokenId, bytes32 seed)\\n        external\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n\\n        // 256\\n        // hue1\\n        // hue2\\n        // s1\\n        // s2\\n        // lightness\\n        // style\\n        uint32 style = uint32(bytes4(seed << 192)) % 69;\\n\\n        bytes memory inner;\\n        bytes memory name;\\n        if (style < 50) {\\n            (name, inner) = decompress(gmData1.getSvg(style));\\n        } else {\\n            (name, inner) = decompress(gmData2.getSvg(style));\\n        }\\n\\n        Hsl memory hsl = _getHsl(seed);\\n\\n        return (\\n            abi.encodePacked(\\n                svgPreambleString(hsl),\\n                inner,\\n                \\\"</svg>\\\"\\n            ),\\n            name\\n        );\\n    }\\n\\n//    function toHtmlHexString(uint256 value)\\n//        internal\\n//        pure\\n//        returns (string memory)\\n//    {\\n//        bytes memory buffer = new bytes(7);\\n//        buffer[0] = \\\"#\\\";\\n//        for (uint256 i = 6; i > 0; --i) {\\n//            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n//            value >>= 4;\\n//        }\\n//\\n//        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n//        return string(buffer);\\n//    }\\n\\n    function svgPreambleString(Hsl memory hsl)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n\\n        string memory hsl1 = string(abi.encodePacked('hsl(', StringsUpgradeable.toString(hsl.h1), ',', StringsUpgradeable.toString(hsl.s1), '%,', StringsUpgradeable.toString(hsl.l1), '%)'));\\n        string memory hsl2 = string(abi.encodePacked('hsl(', StringsUpgradeable.toString(hsl.h2), ',', StringsUpgradeable.toString(hsl.s2), '%,', StringsUpgradeable.toString(hsl.l2), '%)'));\\n\\n        return\\n            abi.encodePacked(\\n                \\\"<svg viewBox='0 0 640 640' xmlns='http://www.w3.org/2000/svg'><style> @font-face { font-family: CourierFont; src: url('\\\",\\n                font.font(),\\n                \\\"') format('opentype'); } .base{fill:\\\",\\n                hsl1,\\n                ';font-family:CourierFont;font-size: 16px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',\\n                hsl2,\\n                '\\\" /> '\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1a10b0d53a4627091b8841c71d7c070a1caf12b46602c7664ff98e03cca55863\",\"license\":\"MIT\"},\"contracts/InflateLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//\\n// inflate content script:\\n// var pako = require('pako')\\n// var deflate = (str) => [str.length,Buffer.from(pako.deflateRaw(Buffer.from(str, 'utf-8'), {level: 9})).toString('hex')]\\n//\\n\\n/// @notice Based on https://github.com/madler/zlib/blob/master/contrib/puff\\nlibrary InflateLib {\\n    // Maximum bits in a code\\n    uint256 constant MAXBITS = 15;\\n    // Maximum number of literal/length codes\\n    uint256 constant MAXLCODES = 286;\\n    // Maximum number of distance codes\\n    uint256 constant MAXDCODES = 30;\\n    // Maximum codes lengths to read\\n    uint256 constant MAXCODES = (MAXLCODES + MAXDCODES);\\n    // Number of fixed literal/length codes\\n    uint256 constant FIXLCODES = 288;\\n\\n    // Error codes\\n    enum ErrorCode {\\n        ERR_NONE, // 0 successful inflate\\n        ERR_NOT_TERMINATED, // 1 available inflate data did not terminate\\n        ERR_OUTPUT_EXHAUSTED, // 2 output space exhausted before completing inflate\\n        ERR_INVALID_BLOCK_TYPE, // 3 invalid block type (type == 3)\\n        ERR_STORED_LENGTH_NO_MATCH, // 4 stored block length did not match one's complement\\n        ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES, // 5 dynamic block code description: too many length or distance codes\\n        ERR_CODE_LENGTHS_CODES_INCOMPLETE, // 6 dynamic block code description: code lengths codes incomplete\\n        ERR_REPEAT_NO_FIRST_LENGTH, // 7 dynamic block code description: repeat lengths with no first length\\n        ERR_REPEAT_MORE, // 8 dynamic block code description: repeat more than specified lengths\\n        ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS, // 9 dynamic block code description: invalid literal/length code lengths\\n        ERR_INVALID_DISTANCE_CODE_LENGTHS, // 10 dynamic block code description: invalid distance code lengths\\n        ERR_MISSING_END_OF_BLOCK, // 11 dynamic block code description: missing end-of-block code\\n        ERR_INVALID_LENGTH_OR_DISTANCE_CODE, // 12 invalid literal/length or distance code in fixed or dynamic block\\n        ERR_DISTANCE_TOO_FAR, // 13 distance is too far back in fixed or dynamic block\\n        ERR_CONSTRUCT // 14 internal: error in construct()\\n    }\\n\\n    // Input and output state\\n    struct State {\\n        //////////////////\\n        // Output state //\\n        //////////////////\\n        // Output buffer\\n        bytes output;\\n        // Bytes written to out so far\\n        uint256 outcnt;\\n        /////////////////\\n        // Input state //\\n        /////////////////\\n        // Input buffer\\n        bytes input;\\n        // Bytes read so far\\n        uint256 incnt;\\n        ////////////////\\n        // Temp state //\\n        ////////////////\\n        // Bit buffer\\n        uint256 bitbuf;\\n        // Number of bits in bit buffer\\n        uint256 bitcnt;\\n        //////////////////////////\\n        // Static Huffman codes //\\n        //////////////////////////\\n        Huffman lencode;\\n        Huffman distcode;\\n    }\\n\\n    // Huffman code decoding tables\\n    struct Huffman {\\n        uint256[] counts;\\n        uint256[] symbols;\\n    }\\n\\n    function bits(State memory s, uint256 need)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Bit accumulator (can use up to 20 bits)\\n        uint256 val;\\n\\n        // Load at least need bits into val\\n        val = s.bitbuf;\\n        while (s.bitcnt < need) {\\n            if (s.incnt == s.input.length) {\\n                // Out of input\\n                return (ErrorCode.ERR_NOT_TERMINATED, 0);\\n            }\\n\\n            // Load eight bits\\n            val |= uint256(uint8(s.input[s.incnt++])) << s.bitcnt;\\n            s.bitcnt += 8;\\n        }\\n\\n        // Drop need bits and update buffer, always zero to seven bits left\\n        s.bitbuf = val >> need;\\n        s.bitcnt -= need;\\n\\n        // Return need bits, zeroing the bits above that\\n        uint256 ret = (val & ((1 << need) - 1));\\n        return (ErrorCode.ERR_NONE, ret);\\n    }\\n\\n    function _stored(State memory s) private pure returns (ErrorCode) {\\n        // Length of stored block\\n        uint256 len;\\n\\n        // Discard leftover bits from current byte (assumes s.bitcnt < 8)\\n        s.bitbuf = 0;\\n        s.bitcnt = 0;\\n\\n        // Get length and check against its one's complement\\n        if (s.incnt + 4 > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        len = uint256(uint8(s.input[s.incnt++]));\\n        len |= uint256(uint8(s.input[s.incnt++])) << 8;\\n\\n        if (\\n            uint8(s.input[s.incnt++]) != (~len & 0xFF) ||\\n            uint8(s.input[s.incnt++]) != ((~len >> 8) & 0xFF)\\n        ) {\\n            // Didn't match complement!\\n            return ErrorCode.ERR_STORED_LENGTH_NO_MATCH;\\n        }\\n\\n        // Copy len bytes from in to out\\n        if (s.incnt + len > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        if (s.outcnt + len > s.output.length) {\\n            // Not enough output space\\n            return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n        }\\n        while (len != 0) {\\n            // Note: Solidity reverts on underflow, so we decrement here\\n            len -= 1;\\n            s.output[s.outcnt++] = s.input[s.incnt++];\\n        }\\n\\n        // Done with a valid stored block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _decode(State memory s, Huffman memory h)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Current number of bits in code\\n        uint256 len;\\n        // Len bits being decoded\\n        uint256 code = 0;\\n        // First code of length len\\n        uint256 first = 0;\\n        // Number of codes of length len\\n        uint256 count;\\n        // Index of first code of length len in symbol table\\n        uint256 index = 0;\\n        // Error code\\n        ErrorCode err;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // Get next bit\\n            uint256 tempCode;\\n            (err, tempCode) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, 0);\\n            }\\n            code |= tempCode;\\n            count = h.counts[len];\\n\\n            // If length len, return symbol\\n            if (code < first + count) {\\n                return (ErrorCode.ERR_NONE, h.symbols[index + (code - first)]);\\n            }\\n            // Else update for next length\\n            index += count;\\n            first += count;\\n            first <<= 1;\\n            code <<= 1;\\n        }\\n\\n        // Ran out of codes\\n        return (ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE, 0);\\n    }\\n\\n    function _construct(\\n        Huffman memory h,\\n        uint256[] memory lengths,\\n        uint256 n,\\n        uint256 start\\n    ) private pure returns (ErrorCode) {\\n        // Current symbol when stepping through lengths[]\\n        uint256 symbol;\\n        // Current length when stepping through h.counts[]\\n        uint256 len;\\n        // Number of possible codes left of current length\\n        uint256 left;\\n        // Offsets in symbol table for each length\\n        uint256[MAXBITS + 1] memory offs;\\n\\n        // Count number of codes of each length\\n        for (len = 0; len <= MAXBITS; len++) {\\n            h.counts[len] = 0;\\n        }\\n        for (symbol = 0; symbol < n; symbol++) {\\n            // Assumes lengths are within bounds\\n            h.counts[lengths[start + symbol]]++;\\n        }\\n        // No codes!\\n        if (h.counts[0] == n) {\\n            // Complete, but decode() will fail\\n            return (ErrorCode.ERR_NONE);\\n        }\\n\\n        // Check for an over-subscribed or incomplete set of lengths\\n\\n        // One possible code of zero length\\n        left = 1;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // One more bit, double codes left\\n            left <<= 1;\\n            if (left < h.counts[len]) {\\n                // Over-subscribed--return error\\n                return ErrorCode.ERR_CONSTRUCT;\\n            }\\n            // Deduct count from possible codes\\n\\n            left -= h.counts[len];\\n        }\\n\\n        // Generate offsets into symbol table for each length for sorting\\n        offs[1] = 0;\\n        for (len = 1; len < MAXBITS; len++) {\\n            offs[len + 1] = offs[len] + h.counts[len];\\n        }\\n\\n        // Put symbols in table sorted by length, by symbol order within each length\\n        for (symbol = 0; symbol < n; symbol++) {\\n            if (lengths[start + symbol] != 0) {\\n                h.symbols[offs[lengths[start + symbol]]++] = symbol;\\n            }\\n        }\\n\\n        // Left > 0 means incomplete\\n        return left > 0 ? ErrorCode.ERR_CONSTRUCT : ErrorCode.ERR_NONE;\\n    }\\n\\n    function _codes(\\n        State memory s,\\n        Huffman memory lencode,\\n        Huffman memory distcode\\n    ) private pure returns (ErrorCode) {\\n        // Decoded symbol\\n        uint256 symbol;\\n        // Length for copy\\n        uint256 len;\\n        // Distance for copy\\n        uint256 dist;\\n        // TODO Solidity doesn't support constant arrays, but these are fixed at compile-time\\n        // Size base for length codes 257..285\\n        uint16[29] memory lens =\\n            [\\n                3,\\n                4,\\n                5,\\n                6,\\n                7,\\n                8,\\n                9,\\n                10,\\n                11,\\n                13,\\n                15,\\n                17,\\n                19,\\n                23,\\n                27,\\n                31,\\n                35,\\n                43,\\n                51,\\n                59,\\n                67,\\n                83,\\n                99,\\n                115,\\n                131,\\n                163,\\n                195,\\n                227,\\n                258\\n            ];\\n        // Extra bits for length codes 257..285\\n        uint8[29] memory lext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                1,\\n                1,\\n                2,\\n                2,\\n                2,\\n                2,\\n                3,\\n                3,\\n                3,\\n                3,\\n                4,\\n                4,\\n                4,\\n                4,\\n                5,\\n                5,\\n                5,\\n                5,\\n                0\\n            ];\\n        // Offset base for distance codes 0..29\\n        uint16[30] memory dists =\\n            [\\n                1,\\n                2,\\n                3,\\n                4,\\n                5,\\n                7,\\n                9,\\n                13,\\n                17,\\n                25,\\n                33,\\n                49,\\n                65,\\n                97,\\n                129,\\n                193,\\n                257,\\n                385,\\n                513,\\n                769,\\n                1025,\\n                1537,\\n                2049,\\n                3073,\\n                4097,\\n                6145,\\n                8193,\\n                12289,\\n                16385,\\n                24577\\n            ];\\n        // Extra bits for distance codes 0..29\\n        uint8[30] memory dext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                2,\\n                2,\\n                3,\\n                3,\\n                4,\\n                4,\\n                5,\\n                5,\\n                6,\\n                6,\\n                7,\\n                7,\\n                8,\\n                8,\\n                9,\\n                9,\\n                10,\\n                10,\\n                11,\\n                11,\\n                12,\\n                12,\\n                13,\\n                13\\n            ];\\n        // Error code\\n        ErrorCode err;\\n\\n        // Decode literals and length/distance pairs\\n        while (symbol != 256) {\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return err;\\n            }\\n\\n            if (symbol < 256) {\\n                // Literal: symbol is the byte\\n                // Write out the literal\\n                if (s.outcnt == s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                s.output[s.outcnt] = bytes1(uint8(symbol));\\n                s.outcnt++;\\n            } else if (symbol > 256) {\\n                uint256 tempBits;\\n                // Length\\n                // Get and compute length\\n                symbol -= 257;\\n                if (symbol >= 29) {\\n                    // Invalid fixed code\\n                    return ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE;\\n                }\\n\\n                (err, tempBits) = bits(s, lext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                len = lens[symbol] + tempBits;\\n\\n                // Get and check distance\\n                (err, symbol) = _decode(s, distcode);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    // Invalid symbol\\n                    return err;\\n                }\\n                (err, tempBits) = bits(s, dext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                dist = dists[symbol] + tempBits;\\n                if (dist > s.outcnt) {\\n                    // Distance too far back\\n                    return ErrorCode.ERR_DISTANCE_TOO_FAR;\\n                }\\n\\n                // Copy length bytes from distance bytes back\\n                if (s.outcnt + len > s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                while (len != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    len -= 1;\\n                    s.output[s.outcnt] = s.output[s.outcnt - dist];\\n                    s.outcnt++;\\n                }\\n            } else {\\n                s.outcnt += len;\\n            }\\n        }\\n\\n        // Done with a valid fixed or dynamic block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _build_fixed(State memory s) private pure returns (ErrorCode) {\\n        // Build fixed Huffman tables\\n        // TODO this is all a compile-time constant\\n        uint256 symbol;\\n        uint256[] memory lengths = new uint256[](FIXLCODES);\\n\\n        // Literal/length table\\n        for (symbol = 0; symbol < 144; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n        for (; symbol < 256; symbol++) {\\n            lengths[symbol] = 9;\\n        }\\n        for (; symbol < 280; symbol++) {\\n            lengths[symbol] = 7;\\n        }\\n        for (; symbol < FIXLCODES; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n\\n        _construct(s.lencode, lengths, FIXLCODES, 0);\\n\\n        // Distance table\\n        for (symbol = 0; symbol < MAXDCODES; symbol++) {\\n            lengths[symbol] = 5;\\n        }\\n\\n        _construct(s.distcode, lengths, MAXDCODES, 0);\\n\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _fixed(State memory s) private pure returns (ErrorCode) {\\n        // Decode data until end-of-block code\\n        return _codes(s, s.lencode, s.distcode);\\n    }\\n\\n    function _build_dynamic_lengths(State memory s)\\n        private\\n        pure\\n        returns (ErrorCode, uint256[] memory)\\n    {\\n        uint256 ncode;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Error code\\n        ErrorCode err;\\n        // Permutation of code length codes\\n        uint8[19] memory order =\\n            [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\\n\\n        (err, ncode) = bits(s, 4);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lengths);\\n        }\\n        ncode += 4;\\n\\n        // Read code length code lengths (really), missing lengths are zero\\n        for (index = 0; index < ncode; index++) {\\n            (err, lengths[order[index]]) = bits(s, 3);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, lengths);\\n            }\\n        }\\n        for (; index < 19; index++) {\\n            lengths[order[index]] = 0;\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lengths);\\n    }\\n\\n    function _build_dynamic(State memory s)\\n        private\\n        pure\\n        returns (\\n            ErrorCode,\\n            Huffman memory,\\n            Huffman memory\\n        )\\n    {\\n        // Number of lengths in descriptor\\n        uint256 nlen;\\n        uint256 ndist;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Error code\\n        ErrorCode err;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Length and distance codes\\n        Huffman memory lencode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXLCODES));\\n        Huffman memory distcode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES));\\n        uint256 tempBits;\\n\\n        // Get number of lengths in each table, check lengths\\n        (err, nlen) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        nlen += 257;\\n        (err, ndist) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        ndist += 1;\\n\\n        if (nlen > MAXLCODES || ndist > MAXDCODES) {\\n            // Bad counts\\n            return (\\n                ErrorCode.ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        (err, lengths) = _build_dynamic_lengths(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n\\n        // Build huffman table for code lengths codes (use lencode temporarily)\\n        err = _construct(lencode, lengths, 19, 0);\\n        if (err != ErrorCode.ERR_NONE) {\\n            // Require complete code set here\\n            return (\\n                ErrorCode.ERR_CODE_LENGTHS_CODES_INCOMPLETE,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Read length/literal and distance code length tables\\n        index = 0;\\n        while (index < nlen + ndist) {\\n            // Decoded value\\n            uint256 symbol;\\n            // Last length to repeat\\n            uint256 len;\\n\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return (err, lencode, distcode);\\n            }\\n\\n            if (symbol < 16) {\\n                // Length in 0..15\\n                lengths[index++] = symbol;\\n            } else {\\n                // Repeat instruction\\n                // Assume repeating zeros\\n                len = 0;\\n                if (symbol == 16) {\\n                    // Repeat last length 3..6 times\\n                    if (index == 0) {\\n                        // No last length!\\n                        return (\\n                            ErrorCode.ERR_REPEAT_NO_FIRST_LENGTH,\\n                            lencode,\\n                            distcode\\n                        );\\n                    }\\n                    // Last length\\n                    len = lengths[index - 1];\\n                    (err, tempBits) = bits(s, 2);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else if (symbol == 17) {\\n                    // Repeat zero 3..10 times\\n                    (err, tempBits) = bits(s, 3);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else {\\n                    // == 18, repeat zero 11..138 times\\n                    (err, tempBits) = bits(s, 7);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 11 + tempBits;\\n                }\\n\\n                if (index + symbol > nlen + ndist) {\\n                    // Too many lengths!\\n                    return (ErrorCode.ERR_REPEAT_MORE, lencode, distcode);\\n                }\\n                while (symbol != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    symbol -= 1;\\n\\n                    // Repeat last or zero symbol times\\n                    lengths[index++] = len;\\n                }\\n            }\\n        }\\n\\n        // Check for end-of-block code -- there better be one!\\n        if (lengths[256] == 0) {\\n            return (ErrorCode.ERR_MISSING_END_OF_BLOCK, lencode, distcode);\\n        }\\n\\n        // Build huffman table for literal/length codes\\n        err = _construct(lencode, lengths, nlen, 0);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                nlen != lencode.counts[0] + lencode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Build huffman table for distance codes\\n        err = _construct(distcode, lengths, ndist, nlen);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                ndist != distcode.counts[0] + distcode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_DISTANCE_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lencode, distcode);\\n    }\\n\\n    function _dynamic(State memory s) private pure returns (ErrorCode) {\\n        // Length and distance codes\\n        Huffman memory lencode;\\n        Huffman memory distcode;\\n        // Error code\\n        ErrorCode err;\\n\\n        (err, lencode, distcode) = _build_dynamic(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return err;\\n        }\\n\\n        // Decode data until end-of-block code\\n        return _codes(s, lencode, distcode);\\n    }\\n\\n    function puff(bytes memory source, uint256 destlen)\\n        internal\\n        pure\\n        returns (ErrorCode, bytes memory)\\n    {\\n        // Input/output state\\n        State memory s =\\n            State(\\n                new bytes(destlen),\\n                0,\\n                source,\\n                0,\\n                0,\\n                0,\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](FIXLCODES)),\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES))\\n            );\\n        // Temp: last bit\\n        uint256 last;\\n        // Temp: block type bit\\n        uint256 t;\\n        // Error code\\n        ErrorCode err;\\n\\n        // Build fixed Huffman tables\\n        err = _build_fixed(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, s.output);\\n        }\\n\\n        // Process blocks until last block or error\\n        while (last == 0) {\\n            // One if last block\\n            (err, last) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            // Block type 0..3\\n            (err, t) = bits(s, 2);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            err = (\\n                t == 0\\n                    ? _stored(s)\\n                    : (\\n                        t == 1\\n                            ? _fixed(s)\\n                            : (\\n                                t == 2\\n                                    ? _dynamic(s)\\n                                    : ErrorCode.ERR_INVALID_BLOCK_TYPE\\n                            )\\n                    )\\n            );\\n            // type == 3, invalid\\n\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Return with error\\n                break;\\n            }\\n        }\\n\\n        return (err, s.output);\\n    }\\n}\\n\",\"keccak256\":\"0x30e7ed53c66fef1587d3e47587193272dd6184ed1010bb0418aa8de041818ef5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002ac438038062002ac483398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c0516129d6620000ee60003960006101950152600060e6015260006106df01526129d66000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806390accf561461003b5780639ab440b414610065575b600080fd5b61004e61004936600461238a565b610078565b60405161005c929190612483565b60405180910390f35b61004e6100733660046124a8565b610099565b606080600061008f84602001518560400151610219565b9451959350505050565b60608060006100b3604563ffffffff602087901c166124e0565b905060608060328363ffffffff1610156101765760405163586e3c7d60e11b815263ffffffff8416600482015261016d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa906024015b60006040518083038186803b15801561013157600080fd5b505afa158015610145573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100499190810190612553565b925090506101d1565b60405163586e3c7d60e11b815263ffffffff841660048201526101cc907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa90602401610119565b925090505b60006101dc876104c8565b90506101e78161061f565b836040516020016101f992919061260c565b6040516020818303038152906040528295509550505050505b9250929050565b600060606000604051806101000160405280856001600160401b038111156102435761024361229f565b6040519080825280601f01601f19166020018201604052801561026d576020820181803683370190505b508152602001600081526020018681526020016000815260200160008152602001600081526020016040518060400160405280600f60016102ae9190612662565b6001600160401b038111156102c5576102c561229f565b6040519080825280602002602001820160405280156102ee578160200160208202803683370190505b5081526040805161012080825261242082019092526020928301929091908201612400803683370190505081525081526020016040518060400160405280600f600161033a9190612662565b6001600160401b038111156103515761035161229f565b60405190808252806020026020018201604052801561037a578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c080368337505050905290529050600080806103b68461079e565b9050600081600e8111156103cc576103cc61267a565b146103e1579251929450919250610212915050565b826104b8576103f1846001610928565b93509050600081600e8111156104095761040961267a565b1461041e579251929450919250610212915050565b610429846002610928565b92509050600081600e8111156104415761044161267a565b14610456579251929450919250610212915050565b811561048a57816001146104815781600214610473576003610493565b61047c846109f9565b610493565b61047c84610a73565b61049384610a8e565b9050600081600e8111156104a9576104a961267a565b146104b3576104b8565b6103e1565b9251929792965091945050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529061050a61016860e085901c6124e0565b9050600061052461016863ffffffff60c087901c166124e0565b9050600061053d605963ffffffff60a088901c166124e0565b610548906016612690565b90506000610561606263ffffffff608089901c166124e0565b61056c906016612690565b90506000610585600263ffffffff60608a901c166124e0565b9050600061059e601463ffffffff60608b901c166124e0565b9050600063ffffffff83166105bf576105b8826014612690565b90506105cd565b6105ca82603c612690565b90505b60006105da8260646126b8565b6040805160c08101825263ffffffff9a8b168152978a16602089015292891692870192909252509486166060850152505083166080820152911660a082015292915050565b60606000610636836000015163ffffffff16610c9e565b610649846020015163ffffffff16610c9e565b61065c856040015163ffffffff16610c9e565b60405160200161066e939291906126dd565b60405160208183030381529060405290506000610694846060015163ffffffff16610c9e565b6106a7856080015163ffffffff16610c9e565b6106ba8660a0015163ffffffff16610c9e565b6040516020016106cc939291906126dd565b60405160208183030381529060405290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d37bc7c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610772919081019061275c565b8282604051602001610786939291906127a4565b60405160208183030381529060405292505050919050565b604080516101208082526124208201909252600091829182916020820161240080368337019050509050600091505b60908210156108075760088183815181106107ea576107ea612930565b6020908102919091010152816107ff81612946565b9250506107cd565b61010082101561084257600981838151811061082557610825612930565b60209081029190910101528161083a81612946565b925050610807565b61011882101561087d57600781838151811061086057610860612930565b60209081029190910101528161087581612946565b925050610842565b6101208210156108b857600881838151811061089b5761089b612930565b6020908102919091010152816108b081612946565b92505061087d565b6108cb8460c00151826101206000610da3565b50600091505b601e82101561090b5760058183815181106108ee576108ee612930565b60209081029190910101528161090381612946565b9250506108d1565b61091d8460e0015182601e6000610da3565b506000949350505050565b608082015160009081905b838560a0015110156109bc578460400151518560600151141561095e57600160009250925050610212565b60a085015160408601516060870180519061097882612946565b90528151811061098a5761098a612930565b602001015160f81c60f81b60f81c60ff16901b8117905060088560a0018181516109b49190612662565b905250610933565b80841c608086015260a0850180518591906109d8908390612961565b90525060006109ea600180871b612961565b60009792169550909350505050565b6000610a18604051806040016040528060608152602001606081525090565b60408051808201909152606080825260208201526000610a378561106c565b90945092509050600081600e811115610a5257610a5261267a565b14610a5f57949350505050565b610a6a858484611722565b95945050505050565b6000610a88828360c001518460e00151611722565b92915050565b60006080820181905260a082018190526040820151516060830151829190610ab7906004612662565b1115610ac65750600192915050565b604083015160608401805190610adb82612946565b905281518110610aed57610aed612930565b0160200151604084015160608501805160f89390931c935060089290610b1282612946565b905281518110610b2457610b24612930565b602001015160f81c60f81b60f81c60ff16901b81179050801960ff168360400151846060018051809190610b5790612946565b905281518110610b6957610b69612930565b016020015160f81c141580610bb45750604083015160608401805160ff841960081c169291610b9782612946565b905281518110610ba957610ba9612930565b016020015160f81c14155b15610bc25750600492915050565b826040015151818460600151610bd89190612662565b1115610be75750600192915050565b8251516020840151610bfa908390612662565b1115610c095750600292915050565b8015610c9557610c1a600182612961565b90508260400151836060018051809190610c3390612946565b905281518110610c4557610c45612930565b602001015160f81c60f81b8360000151846020018051809190610c6790612946565b905281518110610c7957610c79612930565b60200101906001600160f81b031916908160001a905350610c09565b50600092915050565b606081610cc25750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cec5780610cd681612946565b9150610ce59050600a83612978565b9150610cc6565b6000816001600160401b03811115610d0657610d0661229f565b6040519080825280601f01601f191660200182016040528015610d30576020820181803683370190505b5090505b8415610d9b57610d45600183612961565b9150610d52600a8661298c565b610d5d906030612662565b60f81b818381518110610d7257610d72612930565b60200101906001600160f81b031916908160001a905350610d94600a86612978565b9450610d34565b949350505050565b600080600080610db1612280565b600092505b600f8311610df357600089600001518481518110610dd657610dd6612930565b602090810291909101015282610deb81612946565b935050610db6565b600093505b86841015610e5f57885188610e0d8689612662565b81518110610e1d57610e1d612930565b602002602001015181518110610e3557610e35612930565b602002602001018051809190610e4a90612946565b90525083610e5781612946565b945050610df8565b868960000151600081518110610e7757610e77612930565b60200260200101511415610e92576000945050505050610d9b565b60019150600192505b600f8311610f15578851805160019390931b9284908110610ebe57610ebe612930565b6020026020010151821015610eda57600e945050505050610d9b565b8851805184908110610eee57610eee612930565b602002602001015182610f019190612961565b915082610f0d81612946565b935050610e9b565b60006020820152600192505b600f831015610f9a578851805184908110610f3e57610f3e612930565b6020026020010151818460108110610f5857610f58612930565b6020020151610f679190612662565b81610f73856001612662565b60108110610f8357610f83612930565b602002015282610f9281612946565b935050610f21565b600093505b8684101561104d5787610fb28588612662565b81518110610fc257610fc2612930565b602002602001015160001461103b5760208901518490828a610fe4848b612662565b81518110610ff457610ff4612930565b60200260200101516010811061100c5761100c612930565b6020020180519061101c82612946565b90528151811061102e5761102e612930565b6020026020010181815250505b8361104581612946565b945050610f9f565b6000821161105c57600061105f565b600e5b9998505050505050505050565b600061108b604051806040016040528060608152602001606081525090565b60408051808201909152606080825260208201526000808080806110b2601e61011e612662565b6001600160401b038111156110c9576110c961229f565b6040519080825280602002602001820160405280156110f2578160200160208202803683370190505b50905060006040518060400160405280600f60016111109190612662565b6001600160401b038111156111275761112761229f565b604051908082528060200260200182016040528015611150578160200160208202803683370190505b5081526040805161011e8082526123e0820190925260209283019290919082016123c08036833701905050815250905060006040518060400160405280600f600161119b9190612662565b6001600160401b038111156111b2576111b261229f565b6040519080825280602002602001820160405280156111db578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c0803683375050509052905060006112158c6005610928565b98509450600085600e81111561122d5761122d61267a565b146112455750929850965090945061171b9350505050565b61125161010189612662565b975061125e8c6005610928565b97509450600085600e8111156112765761127661267a565b1461128e5750929850965090945061171b9350505050565b611299600188612662565b965061011e8811806112ab5750601e87115b156112c5575060059950909750955061171b945050505050565b6112ce8c611f4f565b9095509350600085600e8111156112e7576112e761267a565b146112ff5750929850965090945061171b9350505050565b61130d838560136000610da3565b9450600085600e8111156113235761132361267a565b1461133d575060069950909750955061171b945050505050565b600095505b61134c8789612662565b861015611545576000806113608e86612171565b9097509150600087600e8111156113795761137961267a565b146113935750949a50919850965061171b95505050505050565b60108210156113cb578186896113a881612946565b9a50815181106113ba576113ba612930565b60200260200101818152505061153e565b506000601082141561146a57876113f4575060079b5092995090975061171b9650505050505050565b8561140060018a612961565b8151811061141057611410612930565b602002602001015190506114258e6002610928565b9097509250600087600e81111561143e5761143e61267a565b146114585750949a50919850965061171b95505050505050565b611463836003612662565b91506114ca565b816011141561147e576114258e6003610928565b6114898e6007610928565b9097509250600087600e8111156114a2576114a261267a565b146114bc5750949a50919850965061171b95505050505050565b6114c783600b612662565b91505b6114d4898b612662565b6114de838a612662565b11156114fc575060089b5092995090975061171b9650505050505050565b811561153e5761150d600183612961565b915080868961151b81612946565b9a508151811061152d5761152d612930565b6020026020010181815250506114fc565b5050611342565b836101008151811061155957611559612930565b60200260200101516000141561157e5750600b9950909750955061171b945050505050565b61158b83858a6000610da3565b9450600085600e8111156115a1576115a161267a565b1415801561162b5750600185600e8111156115be576115be61267a565b14806115db5750600285600e8111156115d9576115d961267a565b145b8061162b57508251805160019081106115f6576115f6612930565b6020026020010151836000015160008151811061161557611615612930565b60200260200101516116279190612662565b8814155b15611645575060099950909750955061171b945050505050565b6116518285898b610da3565b9450600085600e8111156116675761166761267a565b141580156116f15750600185600e8111156116845761168461267a565b14806116a15750600285600e81111561169f5761169f61267a565b145b806116f157508151805160019081106116bc576116bc612930565b602002602001015182600001516000815181106116db576116db612930565b60200260200101516116ed9190612662565b8714155b1561170b5750600a9950909750955061171b945050505050565b5060009950909750955050505050505b9193909250565b6000806000806000604051806103a00160405280600361ffff168152602001600461ffff168152602001600561ffff168152602001600661ffff168152602001600761ffff168152602001600861ffff168152602001600961ffff168152602001600a61ffff168152602001600b61ffff168152602001600d61ffff168152602001600f61ffff168152602001601161ffff168152602001601361ffff168152602001601761ffff168152602001601b61ffff168152602001601f61ffff168152602001602361ffff168152602001602b61ffff168152602001603361ffff168152602001603b61ffff168152602001604361ffff168152602001605361ffff168152602001606361ffff168152602001607361ffff168152602001608361ffff16815260200160a361ffff16815260200160c361ffff16815260200160e361ffff16815260200161010261ffff1681525090506000604051806103a00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600060ff1681525090506000604051806103c00160405280600161ffff168152602001600261ffff168152602001600361ffff168152602001600461ffff168152602001600561ffff168152602001600761ffff168152602001600961ffff168152602001600d61ffff168152602001601161ffff168152602001601961ffff168152602001602161ffff168152602001603161ffff168152602001604161ffff168152602001606161ffff168152602001608161ffff16815260200160c161ffff16815260200161010161ffff16815260200161018161ffff16815260200161020161ffff16815260200161030161ffff16815260200161040161ffff16815260200161060161ffff16815260200161080161ffff168152602001610c0161ffff16815260200161100161ffff16815260200161180161ffff16815260200161200161ffff16815260200161300161ffff16815260200161400161ffff16815260200161600161ffff1681525090506000604051806103c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600660ff168152602001600660ff168152602001600760ff168152602001600760ff168152602001600860ff168152602001600860ff168152602001600960ff168152602001600960ff168152602001600a60ff168152602001600a60ff168152602001600b60ff168152602001600b60ff168152602001600c60ff168152602001600c60ff168152602001600d60ff168152602001600d60ff16815250905060005b8761010014611f3b57611c5c8c8c612171565b98509050600081600e811115611c7457611c7461267a565b14611c88579750611f489650505050505050565b610100881015611cfe578b515160208d01511415611cb157600298505050505050505050611f48565b8760f81b8c600001518d6020015181518110611ccf57611ccf612930565b60200101906001600160f81b031916908160001a90535060208c01805190611cf682612946565b905250611c49565b610100881115611f29576000611d166101018a612961565b9850601d8910611d3257600c9950505050505050505050611f48565b611d558d868b601d8110611d4857611d48612930565b602002015160ff16610928565b9092509050600082600e811115611d6e57611d6e61267a565b14611d8357509750611f489650505050505050565b80868a601d8110611d9657611d96612930565b602002015161ffff16611da99190612662565b9750611db58d8c612171565b99509150600082600e811115611dcd57611dcd61267a565b14611de257509750611f489650505050505050565b611df88d848b601e8110611d4857611d48612930565b9092509050600082600e811115611e1157611e1161267a565b14611e2657509750611f489650505050505050565b80848a601e8110611e3957611e39612930565b602002015161ffff16611e4c9190612662565b96508c60200151871115611e6c57600d9950505050505050505050611f48565b8c515160208e0151611e7f908a90612662565b1115611e975760029950505050505050505050611f48565b8715611f2357611ea8600189612961565b97508c60000151878e60200151611ebf9190612961565b81518110611ecf57611ecf612930565b602001015160f81c60f81b8d600001518e6020015181518110611ef457611ef4612930565b60200101906001600160f81b031916908160001a90535060208d01805190611f1b82612946565b905250611e97565b50611c49565b868c602001818151611cf69190612662565b6000985050505050505050505b9392505050565b60006060818080611f63601e61011e612662565b6001600160401b03811115611f7a57611f7a61229f565b604051908082528060200260200182016040528015611fa3578160200160208202803683370190505b506040805161026081018252601081526011602082015260129181019190915260006060820181905260086080830152600760a0830152600960c0830152600660e0830152600a6101008301526005610120830152600b61014083015260046101608301819052600c61018084015260036101a0840152600d6101c084015260026101e0840152600e6102008401526001610220840152600f61024084015292935091612051908990610928565b95509150600082600e8111156120695761206961267a565b1461207a5750969095509350505050565b612085600486612662565b9450600093505b8484101561210e5761209f886003610928565b848387601381106120b2576120b2612930565b602002015160ff16815181106120ca576120ca612930565b60209081029190910101529150600082600e8111156120eb576120eb61267a565b146120fc5750969095509350505050565b8361210681612946565b94505061208c565b60138410156121615760008382866013811061212c5761212c612930565b602002015160ff168151811061214457612144612930565b60209081029190910101528361215981612946565b94505061210e565b5060009791965090945050505050565b600080600181808080805b600f861161226d5760006121918b6001610928565b9092509050600082600e8111156121aa576121aa61267a565b146121c15750965060009550610212945050505050565b8951805196821796889081106121d9576121d9612930565b6020026020010151935083856121ef9190612662565b86101561223a5760208a01516000906122088789612961565b6122129086612662565b8151811061222257612222612930565b60200260200101519850985050505050505050610212565b6122448484612662565b92506122508486612662565b600196871b961b945086905061226581612946565b96505061217c565b50600c9960009950975050505050505050565b6040518061020001604052806010906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156122d7576122d761229f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156123055761230561229f565b604052919050565b60006001600160401b038211156123265761232661229f565b50601f01601f191660200190565b600082601f83011261234557600080fd5b81356123586123538261230d565b6122dd565b81815284602083860101111561236d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561239c57600080fd5b81356001600160401b03808211156123b357600080fd5b90830190606082860312156123c757600080fd5b6123cf6122b5565b8235828111156123de57600080fd5b6123ea87828601612334565b8252506020830135828111156123ff57600080fd5b61240b87828601612334565b6020830152506040830135604082015280935050505092915050565b60005b8381101561244257818101518382015260200161242a565b83811115612451576000848401525b50505050565b6000815180845261246f816020860160208601612427565b601f01601f19169290920160200192915050565b6040815260006124966040830185612457565b8281036020840152610a6a8185612457565b600080604083850312156124bb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806124f7576124f76124ca565b92169190910692915050565b60006125116123538461230d565b905082815283838301111561252557600080fd5b611f48836020830184612427565b600082601f83011261254457600080fd5b611f4883835160208501612503565b60006020828403121561256557600080fd5b81516001600160401b038082111561257c57600080fd5b908301906060828603121561259057600080fd5b6125986122b5565b8251828111156125a757600080fd5b6125b387828601612533565b8252506020830151828111156125c857600080fd5b6125d487828601612533565b6020830152506040830151604082015280935050505092915050565b60008151612602818560208601612427565b9290920192915050565b6000835161261e818460208801612427565b835190830190612632818360208801612427565b651e17b9bb339f60d11b9101908152600601949350505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156126755761267561264c565b500190565b634e487b7160e01b600052602160045260246000fd5b600063ffffffff8083168185168083038211156126af576126af61264c565b01949350505050565b600063ffffffff838116908316818110156126d5576126d561264c565b039392505050565b630d0e6d8560e31b8152600084516126fc816004850160208901612427565b600b60fa1b600491840191820152845161271d816005840160208901612427565b61094b60f21b600592909101918201528351612740816007840160208801612427565b61252960f01b6007929091019182015260090195945050505050565b60006020828403121561276e57600080fd5b81516001600160401b0381111561278457600080fd5b8201601f8101841361279557600080fd5b610d9b84825160208401612503565b7f3c7376672076696577426f783d2730203020363430203634302720786d6c6e7381527f3d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c7360208201527f74796c653e2040666f6e742d66616365207b20666f6e742d66616d696c793a20604082015276436f7572696572466f6e743b207372633a2075726c282760481b606082015260008451612848816077850160208901612427565b7f272920666f726d617428276f70656e7479706527293b207d202e626173657b666077918401918201526334b6361d60e11b6097820152845161289281609b840160208901612427565b7f3b666f6e742d66616d696c793a436f7572696572466f6e743b666f6e742d7369609b92909101918201527f7a653a20313670783b7d3c2f7374796c653e3c726563742077696474683d223160bb8201527818181291103432b4b3b43a1e911898181291103334b6361e9160391b60db82015261292661291560f48301866125f0565b6401110179f160dd1b815260050190565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561295a5761295a61264c565b5060010190565b6000828210156129735761297361264c565b500390565b600082612987576129876124ca565b500490565b60008261299b5761299b6124ca565b50069056fea2646970667358221220a7fb6a2b93805c7aa5b3a40c3cdf37d934d814fd9f769a58c1118dc91c21932d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806390accf561461003b5780639ab440b414610065575b600080fd5b61004e61004936600461238a565b610078565b60405161005c929190612483565b60405180910390f35b61004e6100733660046124a8565b610099565b606080600061008f84602001518560400151610219565b9451959350505050565b60608060006100b3604563ffffffff602087901c166124e0565b905060608060328363ffffffff1610156101765760405163586e3c7d60e11b815263ffffffff8416600482015261016d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa906024015b60006040518083038186803b15801561013157600080fd5b505afa158015610145573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100499190810190612553565b925090506101d1565b60405163586e3c7d60e11b815263ffffffff841660048201526101cc907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa90602401610119565b925090505b60006101dc876104c8565b90506101e78161061f565b836040516020016101f992919061260c565b6040516020818303038152906040528295509550505050505b9250929050565b600060606000604051806101000160405280856001600160401b038111156102435761024361229f565b6040519080825280601f01601f19166020018201604052801561026d576020820181803683370190505b508152602001600081526020018681526020016000815260200160008152602001600081526020016040518060400160405280600f60016102ae9190612662565b6001600160401b038111156102c5576102c561229f565b6040519080825280602002602001820160405280156102ee578160200160208202803683370190505b5081526040805161012080825261242082019092526020928301929091908201612400803683370190505081525081526020016040518060400160405280600f600161033a9190612662565b6001600160401b038111156103515761035161229f565b60405190808252806020026020018201604052801561037a578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c080368337505050905290529050600080806103b68461079e565b9050600081600e8111156103cc576103cc61267a565b146103e1579251929450919250610212915050565b826104b8576103f1846001610928565b93509050600081600e8111156104095761040961267a565b1461041e579251929450919250610212915050565b610429846002610928565b92509050600081600e8111156104415761044161267a565b14610456579251929450919250610212915050565b811561048a57816001146104815781600214610473576003610493565b61047c846109f9565b610493565b61047c84610a73565b61049384610a8e565b9050600081600e8111156104a9576104a961267a565b146104b3576104b8565b6103e1565b9251929792965091945050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529061050a61016860e085901c6124e0565b9050600061052461016863ffffffff60c087901c166124e0565b9050600061053d605963ffffffff60a088901c166124e0565b610548906016612690565b90506000610561606263ffffffff608089901c166124e0565b61056c906016612690565b90506000610585600263ffffffff60608a901c166124e0565b9050600061059e601463ffffffff60608b901c166124e0565b9050600063ffffffff83166105bf576105b8826014612690565b90506105cd565b6105ca82603c612690565b90505b60006105da8260646126b8565b6040805160c08101825263ffffffff9a8b168152978a16602089015292891692870192909252509486166060850152505083166080820152911660a082015292915050565b60606000610636836000015163ffffffff16610c9e565b610649846020015163ffffffff16610c9e565b61065c856040015163ffffffff16610c9e565b60405160200161066e939291906126dd565b60405160208183030381529060405290506000610694846060015163ffffffff16610c9e565b6106a7856080015163ffffffff16610c9e565b6106ba8660a0015163ffffffff16610c9e565b6040516020016106cc939291906126dd565b60405160208183030381529060405290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d37bc7c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610772919081019061275c565b8282604051602001610786939291906127a4565b60405160208183030381529060405292505050919050565b604080516101208082526124208201909252600091829182916020820161240080368337019050509050600091505b60908210156108075760088183815181106107ea576107ea612930565b6020908102919091010152816107ff81612946565b9250506107cd565b61010082101561084257600981838151811061082557610825612930565b60209081029190910101528161083a81612946565b925050610807565b61011882101561087d57600781838151811061086057610860612930565b60209081029190910101528161087581612946565b925050610842565b6101208210156108b857600881838151811061089b5761089b612930565b6020908102919091010152816108b081612946565b92505061087d565b6108cb8460c00151826101206000610da3565b50600091505b601e82101561090b5760058183815181106108ee576108ee612930565b60209081029190910101528161090381612946565b9250506108d1565b61091d8460e0015182601e6000610da3565b506000949350505050565b608082015160009081905b838560a0015110156109bc578460400151518560600151141561095e57600160009250925050610212565b60a085015160408601516060870180519061097882612946565b90528151811061098a5761098a612930565b602001015160f81c60f81b60f81c60ff16901b8117905060088560a0018181516109b49190612662565b905250610933565b80841c608086015260a0850180518591906109d8908390612961565b90525060006109ea600180871b612961565b60009792169550909350505050565b6000610a18604051806040016040528060608152602001606081525090565b60408051808201909152606080825260208201526000610a378561106c565b90945092509050600081600e811115610a5257610a5261267a565b14610a5f57949350505050565b610a6a858484611722565b95945050505050565b6000610a88828360c001518460e00151611722565b92915050565b60006080820181905260a082018190526040820151516060830151829190610ab7906004612662565b1115610ac65750600192915050565b604083015160608401805190610adb82612946565b905281518110610aed57610aed612930565b0160200151604084015160608501805160f89390931c935060089290610b1282612946565b905281518110610b2457610b24612930565b602001015160f81c60f81b60f81c60ff16901b81179050801960ff168360400151846060018051809190610b5790612946565b905281518110610b6957610b69612930565b016020015160f81c141580610bb45750604083015160608401805160ff841960081c169291610b9782612946565b905281518110610ba957610ba9612930565b016020015160f81c14155b15610bc25750600492915050565b826040015151818460600151610bd89190612662565b1115610be75750600192915050565b8251516020840151610bfa908390612662565b1115610c095750600292915050565b8015610c9557610c1a600182612961565b90508260400151836060018051809190610c3390612946565b905281518110610c4557610c45612930565b602001015160f81c60f81b8360000151846020018051809190610c6790612946565b905281518110610c7957610c79612930565b60200101906001600160f81b031916908160001a905350610c09565b50600092915050565b606081610cc25750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cec5780610cd681612946565b9150610ce59050600a83612978565b9150610cc6565b6000816001600160401b03811115610d0657610d0661229f565b6040519080825280601f01601f191660200182016040528015610d30576020820181803683370190505b5090505b8415610d9b57610d45600183612961565b9150610d52600a8661298c565b610d5d906030612662565b60f81b818381518110610d7257610d72612930565b60200101906001600160f81b031916908160001a905350610d94600a86612978565b9450610d34565b949350505050565b600080600080610db1612280565b600092505b600f8311610df357600089600001518481518110610dd657610dd6612930565b602090810291909101015282610deb81612946565b935050610db6565b600093505b86841015610e5f57885188610e0d8689612662565b81518110610e1d57610e1d612930565b602002602001015181518110610e3557610e35612930565b602002602001018051809190610e4a90612946565b90525083610e5781612946565b945050610df8565b868960000151600081518110610e7757610e77612930565b60200260200101511415610e92576000945050505050610d9b565b60019150600192505b600f8311610f15578851805160019390931b9284908110610ebe57610ebe612930565b6020026020010151821015610eda57600e945050505050610d9b565b8851805184908110610eee57610eee612930565b602002602001015182610f019190612961565b915082610f0d81612946565b935050610e9b565b60006020820152600192505b600f831015610f9a578851805184908110610f3e57610f3e612930565b6020026020010151818460108110610f5857610f58612930565b6020020151610f679190612662565b81610f73856001612662565b60108110610f8357610f83612930565b602002015282610f9281612946565b935050610f21565b600093505b8684101561104d5787610fb28588612662565b81518110610fc257610fc2612930565b602002602001015160001461103b5760208901518490828a610fe4848b612662565b81518110610ff457610ff4612930565b60200260200101516010811061100c5761100c612930565b6020020180519061101c82612946565b90528151811061102e5761102e612930565b6020026020010181815250505b8361104581612946565b945050610f9f565b6000821161105c57600061105f565b600e5b9998505050505050505050565b600061108b604051806040016040528060608152602001606081525090565b60408051808201909152606080825260208201526000808080806110b2601e61011e612662565b6001600160401b038111156110c9576110c961229f565b6040519080825280602002602001820160405280156110f2578160200160208202803683370190505b50905060006040518060400160405280600f60016111109190612662565b6001600160401b038111156111275761112761229f565b604051908082528060200260200182016040528015611150578160200160208202803683370190505b5081526040805161011e8082526123e0820190925260209283019290919082016123c08036833701905050815250905060006040518060400160405280600f600161119b9190612662565b6001600160401b038111156111b2576111b261229f565b6040519080825280602002602001820160405280156111db578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c0803683375050509052905060006112158c6005610928565b98509450600085600e81111561122d5761122d61267a565b146112455750929850965090945061171b9350505050565b61125161010189612662565b975061125e8c6005610928565b97509450600085600e8111156112765761127661267a565b1461128e5750929850965090945061171b9350505050565b611299600188612662565b965061011e8811806112ab5750601e87115b156112c5575060059950909750955061171b945050505050565b6112ce8c611f4f565b9095509350600085600e8111156112e7576112e761267a565b146112ff5750929850965090945061171b9350505050565b61130d838560136000610da3565b9450600085600e8111156113235761132361267a565b1461133d575060069950909750955061171b945050505050565b600095505b61134c8789612662565b861015611545576000806113608e86612171565b9097509150600087600e8111156113795761137961267a565b146113935750949a50919850965061171b95505050505050565b60108210156113cb578186896113a881612946565b9a50815181106113ba576113ba612930565b60200260200101818152505061153e565b506000601082141561146a57876113f4575060079b5092995090975061171b9650505050505050565b8561140060018a612961565b8151811061141057611410612930565b602002602001015190506114258e6002610928565b9097509250600087600e81111561143e5761143e61267a565b146114585750949a50919850965061171b95505050505050565b611463836003612662565b91506114ca565b816011141561147e576114258e6003610928565b6114898e6007610928565b9097509250600087600e8111156114a2576114a261267a565b146114bc5750949a50919850965061171b95505050505050565b6114c783600b612662565b91505b6114d4898b612662565b6114de838a612662565b11156114fc575060089b5092995090975061171b9650505050505050565b811561153e5761150d600183612961565b915080868961151b81612946565b9a508151811061152d5761152d612930565b6020026020010181815250506114fc565b5050611342565b836101008151811061155957611559612930565b60200260200101516000141561157e5750600b9950909750955061171b945050505050565b61158b83858a6000610da3565b9450600085600e8111156115a1576115a161267a565b1415801561162b5750600185600e8111156115be576115be61267a565b14806115db5750600285600e8111156115d9576115d961267a565b145b8061162b57508251805160019081106115f6576115f6612930565b6020026020010151836000015160008151811061161557611615612930565b60200260200101516116279190612662565b8814155b15611645575060099950909750955061171b945050505050565b6116518285898b610da3565b9450600085600e8111156116675761166761267a565b141580156116f15750600185600e8111156116845761168461267a565b14806116a15750600285600e81111561169f5761169f61267a565b145b806116f157508151805160019081106116bc576116bc612930565b602002602001015182600001516000815181106116db576116db612930565b60200260200101516116ed9190612662565b8714155b1561170b5750600a9950909750955061171b945050505050565b5060009950909750955050505050505b9193909250565b6000806000806000604051806103a00160405280600361ffff168152602001600461ffff168152602001600561ffff168152602001600661ffff168152602001600761ffff168152602001600861ffff168152602001600961ffff168152602001600a61ffff168152602001600b61ffff168152602001600d61ffff168152602001600f61ffff168152602001601161ffff168152602001601361ffff168152602001601761ffff168152602001601b61ffff168152602001601f61ffff168152602001602361ffff168152602001602b61ffff168152602001603361ffff168152602001603b61ffff168152602001604361ffff168152602001605361ffff168152602001606361ffff168152602001607361ffff168152602001608361ffff16815260200160a361ffff16815260200160c361ffff16815260200160e361ffff16815260200161010261ffff1681525090506000604051806103a00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600060ff1681525090506000604051806103c00160405280600161ffff168152602001600261ffff168152602001600361ffff168152602001600461ffff168152602001600561ffff168152602001600761ffff168152602001600961ffff168152602001600d61ffff168152602001601161ffff168152602001601961ffff168152602001602161ffff168152602001603161ffff168152602001604161ffff168152602001606161ffff168152602001608161ffff16815260200160c161ffff16815260200161010161ffff16815260200161018161ffff16815260200161020161ffff16815260200161030161ffff16815260200161040161ffff16815260200161060161ffff16815260200161080161ffff168152602001610c0161ffff16815260200161100161ffff16815260200161180161ffff16815260200161200161ffff16815260200161300161ffff16815260200161400161ffff16815260200161600161ffff1681525090506000604051806103c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600660ff168152602001600660ff168152602001600760ff168152602001600760ff168152602001600860ff168152602001600860ff168152602001600960ff168152602001600960ff168152602001600a60ff168152602001600a60ff168152602001600b60ff168152602001600b60ff168152602001600c60ff168152602001600c60ff168152602001600d60ff168152602001600d60ff16815250905060005b8761010014611f3b57611c5c8c8c612171565b98509050600081600e811115611c7457611c7461267a565b14611c88579750611f489650505050505050565b610100881015611cfe578b515160208d01511415611cb157600298505050505050505050611f48565b8760f81b8c600001518d6020015181518110611ccf57611ccf612930565b60200101906001600160f81b031916908160001a90535060208c01805190611cf682612946565b905250611c49565b610100881115611f29576000611d166101018a612961565b9850601d8910611d3257600c9950505050505050505050611f48565b611d558d868b601d8110611d4857611d48612930565b602002015160ff16610928565b9092509050600082600e811115611d6e57611d6e61267a565b14611d8357509750611f489650505050505050565b80868a601d8110611d9657611d96612930565b602002015161ffff16611da99190612662565b9750611db58d8c612171565b99509150600082600e811115611dcd57611dcd61267a565b14611de257509750611f489650505050505050565b611df88d848b601e8110611d4857611d48612930565b9092509050600082600e811115611e1157611e1161267a565b14611e2657509750611f489650505050505050565b80848a601e8110611e3957611e39612930565b602002015161ffff16611e4c9190612662565b96508c60200151871115611e6c57600d9950505050505050505050611f48565b8c515160208e0151611e7f908a90612662565b1115611e975760029950505050505050505050611f48565b8715611f2357611ea8600189612961565b97508c60000151878e60200151611ebf9190612961565b81518110611ecf57611ecf612930565b602001015160f81c60f81b8d600001518e6020015181518110611ef457611ef4612930565b60200101906001600160f81b031916908160001a90535060208d01805190611f1b82612946565b905250611e97565b50611c49565b868c602001818151611cf69190612662565b6000985050505050505050505b9392505050565b60006060818080611f63601e61011e612662565b6001600160401b03811115611f7a57611f7a61229f565b604051908082528060200260200182016040528015611fa3578160200160208202803683370190505b506040805161026081018252601081526011602082015260129181019190915260006060820181905260086080830152600760a0830152600960c0830152600660e0830152600a6101008301526005610120830152600b61014083015260046101608301819052600c61018084015260036101a0840152600d6101c084015260026101e0840152600e6102008401526001610220840152600f61024084015292935091612051908990610928565b95509150600082600e8111156120695761206961267a565b1461207a5750969095509350505050565b612085600486612662565b9450600093505b8484101561210e5761209f886003610928565b848387601381106120b2576120b2612930565b602002015160ff16815181106120ca576120ca612930565b60209081029190910101529150600082600e8111156120eb576120eb61267a565b146120fc5750969095509350505050565b8361210681612946565b94505061208c565b60138410156121615760008382866013811061212c5761212c612930565b602002015160ff168151811061214457612144612930565b60209081029190910101528361215981612946565b94505061210e565b5060009791965090945050505050565b600080600181808080805b600f861161226d5760006121918b6001610928565b9092509050600082600e8111156121aa576121aa61267a565b146121c15750965060009550610212945050505050565b8951805196821796889081106121d9576121d9612930565b6020026020010151935083856121ef9190612662565b86101561223a5760208a01516000906122088789612961565b6122129086612662565b8151811061222257612222612930565b60200260200101519850985050505050505050610212565b6122448484612662565b92506122508486612662565b600196871b961b945086905061226581612946565b96505061217c565b50600c9960009950975050505050505050565b6040518061020001604052806010906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156122d7576122d761229f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156123055761230561229f565b604052919050565b60006001600160401b038211156123265761232661229f565b50601f01601f191660200190565b600082601f83011261234557600080fd5b81356123586123538261230d565b6122dd565b81815284602083860101111561236d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561239c57600080fd5b81356001600160401b03808211156123b357600080fd5b90830190606082860312156123c757600080fd5b6123cf6122b5565b8235828111156123de57600080fd5b6123ea87828601612334565b8252506020830135828111156123ff57600080fd5b61240b87828601612334565b6020830152506040830135604082015280935050505092915050565b60005b8381101561244257818101518382015260200161242a565b83811115612451576000848401525b50505050565b6000815180845261246f816020860160208601612427565b601f01601f19169290920160200192915050565b6040815260006124966040830185612457565b8281036020840152610a6a8185612457565b600080604083850312156124bb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806124f7576124f76124ca565b92169190910692915050565b60006125116123538461230d565b905082815283838301111561252557600080fd5b611f48836020830184612427565b600082601f83011261254457600080fd5b611f4883835160208501612503565b60006020828403121561256557600080fd5b81516001600160401b038082111561257c57600080fd5b908301906060828603121561259057600080fd5b6125986122b5565b8251828111156125a757600080fd5b6125b387828601612533565b8252506020830151828111156125c857600080fd5b6125d487828601612533565b6020830152506040830151604082015280935050505092915050565b60008151612602818560208601612427565b9290920192915050565b6000835161261e818460208801612427565b835190830190612632818360208801612427565b651e17b9bb339f60d11b9101908152600601949350505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156126755761267561264c565b500190565b634e487b7160e01b600052602160045260246000fd5b600063ffffffff8083168185168083038211156126af576126af61264c565b01949350505050565b600063ffffffff838116908316818110156126d5576126d561264c565b039392505050565b630d0e6d8560e31b8152600084516126fc816004850160208901612427565b600b60fa1b600491840191820152845161271d816005840160208901612427565b61094b60f21b600592909101918201528351612740816007840160208801612427565b61252960f01b6007929091019182015260090195945050505050565b60006020828403121561276e57600080fd5b81516001600160401b0381111561278457600080fd5b8201601f8101841361279557600080fd5b610d9b84825160208401612503565b7f3c7376672076696577426f783d2730203020363430203634302720786d6c6e7381527f3d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c7360208201527f74796c653e2040666f6e742d66616365207b20666f6e742d66616d696c793a20604082015276436f7572696572466f6e743b207372633a2075726c282760481b606082015260008451612848816077850160208901612427565b7f272920666f726d617428276f70656e7479706527293b207d202e626173657b666077918401918201526334b6361d60e11b6097820152845161289281609b840160208901612427565b7f3b666f6e742d66616d696c793a436f7572696572466f6e743b666f6e742d7369609b92909101918201527f7a653a20313670783b7d3c2f7374796c653e3c726563742077696474683d223160bb8201527818181291103432b4b3b43a1e911898181291103334b6361e9160391b60db82015261292661291560f48301866125f0565b6401110179f160dd1b815260050190565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561295a5761295a61264c565b5060010190565b6000828210156129735761297361264c565b500390565b600082612987576129876124ca565b500490565b60008261299b5761299b6124ca565b50069056fea2646970667358221220a7fb6a2b93805c7aa5b3a40c3cdf37d934d814fd9f769a58c1118dc91c21932d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}