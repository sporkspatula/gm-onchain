{
  "address": "0x24926c20d0DA1De24f54455ADB2f212fb9D784d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICorruptionsFont",
          "name": "fontAddress",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData1Address",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData2Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "imageName",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "compressedImage",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "compressedSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct GmDataInterface.GmDataSet",
          "name": "gmData",
          "type": "tuple"
        }
      ],
      "name": "decompress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        }
      ],
      "name": "svgRaw",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bb7d021f3dbb79c303046534fb2173cf19bd0d0f3031e428240cba9488e6ad6",
  "receipt": {
    "to": null,
    "from": "0x63588d293313b413d8bBCdAF618D4Fee12D43e87",
    "contractAddress": "0x24926c20d0DA1De24f54455ADB2f212fb9D784d8",
    "transactionIndex": 32,
    "gasUsed": "4969508",
    "logsBloom": "0x
    "blockHash": "0x7c5cc6a0455e15ef2814ae6518aea3e5685d711731e1afa7aab2d24b9d29b89f",
    "transactionHash": "0x6bb7d021f3dbb79c303046534fb2173cf19bd0d0f3031e428240cba9488e6ad6",
    "logs": [],
    "blockNumber": 9935706,
    "cumulativeGasUsed": "12393749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC5D01A9c5e44e95b32F28Da2D2bDccCEe7f6e3d8",
    "0x44b55f5C83ECc004CD2a9aA116ce9C9B6588e35F",
    "0x560b04EbDe9BF707ebd6E11Cf03C7D311c39d732"
  ],
  "solcInputHash": "3db21975abdd364791299bb8be6b7212",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICorruptionsFont\",\"name\":\"fontAddress\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData1Address\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"imageName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"compressedImage\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"compressedSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GmDataInterface.GmDataSet\",\"name\":\"gmData\",\"type\":\"tuple\"}],\"name\":\"decompress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"svgRaw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GmRenderer.sol\":\"GmRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"contracts/GmDataInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface GmDataInterface {\\n    struct GmDataSet {\\n        bytes imageName;\\n        bytes compressedImage;\\n        uint256 compressedSize;\\n    }\\n\\n    function getSvg(uint256 index) external pure returns (GmDataSet memory);\\n}\\n\",\"keccak256\":\"0x4aa3627511d193a62d7e629cc8c25bed6388e6c732ca5ba8df6b2058ebbbe064\",\"license\":\"MIT\"},\"contracts/GmRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {InflateLib} from \\\"./InflateLib.sol\\\";\\nimport {GmDataInterface} from \\\"./GmDataInterface.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\ninterface ICorruptionsFont {\\n    function font() external view returns (string memory);\\n}\\n\\ncontract GmRenderer {\\n    ICorruptionsFont private immutable font;\\n    GmDataInterface private immutable gmData1;\\n    GmDataInterface private immutable gmData2;\\n\\n    struct Color {\\n        bytes hexNum;\\n        bytes name;\\n    }\\n\\n    constructor(\\n        ICorruptionsFont fontAddress,\\n        GmDataInterface gmData1Address,\\n        GmDataInterface gmData2Address\\n    ) {\\n        font = fontAddress;\\n        gmData1 = gmData1Address;\\n        gmData2 = gmData2Address;\\n    }\\n\\n    function decompress(GmDataInterface.GmDataSet memory gmData)\\n        public\\n        pure\\n        returns (bytes memory, bytes memory)\\n    {\\n        (, bytes memory inflated) = InflateLib.puff(\\n            gmData.compressedImage,\\n            gmData.compressedSize\\n        );\\n        return (gmData.imageName, inflated);\\n    }\\n\\n    function _getFilter(uint index) pure internal returns (bytes memory) {\\n        // 0 || 99 2%\\n        if (index == 0 || index == 99) {\\n            return 'noise';\\n        }\\n\\n        // 1 || 2 || 3 || 4 || 5 5%\\n        if ((index == 1) || (index == 2) || (index == 3) || (index == 4) || (index == 5)) {\\n            return 'lit';\\n        }\\n\\n        // 7 || 8 || 98 3%\\n        if ((index == 7) || (index == 8) || (index == 9)) {\\n            return 'scribble';\\n        }\\n\\n        // 10 - 29 -> morph 20%\\n        if (((100 - index) >= 10) && ((100 - index) < 30)) {\\n            return 'morph';\\n        }\\n\\n        // 30 - 39 -> glow 10%\\n        if (((100 - index) >= 30) && ((100 - index) < 40)) {\\n            return 'glow';\\n        }\\n\\n        if (index == 69) {\\n            return 'fractal';\\n        }\\n\\n        return 'none';\\n    }\\n\\n    function _getColors(bytes32 seed) pure internal returns (Color memory bgColor, Color memory fontColor) {\\n        uint32 bgRand = uint32(bytes4(seed)) % 111;\\n        uint32 fontJitter = uint32(bytes4(seed << 32)) % 5;\\n        uint32 fontOperation = uint8(bytes1(seed << 64)) % 2;\\n        uint32 fontRand;\\n        if (fontOperation == 0) {\\n            fontRand  = (bgRand + (55 + fontJitter)) % 111;\\n        } else {\\n            fontRand = (bgRand + (55 - fontJitter)) % 111;\\n        }\\n\\n        return (_getColor(bgRand), _getColor(fontRand));\\n    }\\n\\n    function svgRaw(bytes32 seed)\\n        external\\n        view\\n        returns (bytes memory, bytes memory, bytes memory, bytes memory, bytes memory)\\n    {\\n\\n        // first 24 bytes used to construct hsl\\n        //Hsl memory hsl = _getHsl(seed)\\n        uint32 filterRand = uint32(bytes4(seed << 65)) % 100;\\n        bytes memory filter = _getFilter(filterRand);\\n        uint32 style = uint32(bytes4(seed << 192)) % 69;\\n\\n        (Color memory bgColor, Color memory fontColor) = _getColors(seed);\\n\\n        bytes memory inner;\\n        bytes memory name;\\n        if (style < 50) {\\n            (name, inner) = decompress(gmData1.getSvg(style));\\n        } else {\\n            (name, inner) = decompress(gmData2.getSvg(style));\\n        }\\n\\n        return (\\n            abi.encodePacked(\\n                svgPreambleString(bgColor.hexNum, fontColor.hexNum, filter),\\n                inner,\\n                \\\"</svg>\\\"\\n            ),\\n            name,\\n            bgColor.name,\\n            fontColor.name,\\n            filter\\n        );\\n    }\\n\\n    function svgFilterDefs() private view returns (bytes memory) {\\n        return abi.encodePacked('<defs><filter id=\\\"fractal\\\" filterUnits=\\\"objectBoundingBox\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ><feTurbulence id=\\\"turbulence\\\" type=\\\"fractalNoise\\\" baseFrequency=\\\"0.03\\\" numOctaves=\\\"1\\\" ><animate attributeName=\\\"baseFrequency\\\" values=\\\"0.01;0.4;0.01\\\" dur=\\\"100s\\\" repeatCount=\\\"indefinite\\\" /></feTurbulence><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"50\\\"></feDisplacementMap></filter><filter id=\\\"morph\\\"><feMorphology operator=\\\"dilate\\\" radius=\\\"0\\\"><animate attributeName=\\\"radius\\\" values=\\\"0;5;0\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\" /></feMorphology></filter><filter id=\\\"glow\\\" filterUnits=\\\"objectBoundingBox\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ><feGaussianBlur stdDeviation=\\\"5\\\" result=\\\"blur2\\\" in=\\\"SourceGraphic\\\" /><feMerge><feMergeNode in=\\\"blur2\\\" /><feMergeNode in=\\\"SourceGraphic\\\" /></feMerge></filter><filter id=\\\"noise\\\"><feTurbulence baseFrequency=\\\"0.05\\\"/><feColorMatrix type=\\\"hueRotate\\\" values=\\\"0\\\"><animate attributeName=\\\"values\\\" from=\\\"0\\\" to=\\\"360\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/></feColorMatrix><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"10\\\"/></filter><filter id=\\\"none\\\"><feOffset></feOffset></filter><filter id=\\\"scribble\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"50\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\"/></filter><filter id=\\\"tile\\\" x=\\\"10\\\" y=\\\"10\\\" width=\\\"10%\\\" height=\\\"10%\\\"><feTile in=\\\"SourceGraphic\\\" x=\\\"10\\\" y=\\\"10\\\" width=\\\"10\\\" height=\\\"10\\\" /><feTile/></filter><filter id = \\\"lit\\\" x=\\\"-30\\\" y=\\\"-30\\\" width=\\\"640\\\" height=\\\"640\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.01\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feComposite in=\\\"SourceGraphic\\\" in2=\\\"specOut\\\" operator=\\\"arithmetic\\\" k1=\\\"0\\\" k2=\\\"1\\\" k3=\\\"1\\\" k4=\\\"0\\\"/></filter></defs>');\\n    }\\n\\n    function svgPreambleString(bytes memory bgColor, bytes memory fontColor, bytes memory filter)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n\\n        return\\n            abi.encodePacked(\\n                \\\"<svg viewBox='0 0 640 640' xmlns='http://www.w3.org/2000/svg'><style> @font-face { font-family: CourierFont; src: url('\\\",\\n                font.font(),\\n                \\\"') format('opentype'); }\\\",\\n                svgFilterDefs(),\\n                \\\".base{filter:url(#\\\",\\n                filter,\\n                \\\");fill:\\\",\\n                fontColor,\\n                ';font-family:CourierFont;font-size: 16px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',\\n                bgColor,\\n                '\\\" /> '\\n            );\\n    }\\n\\n    function _getColor(uint32 index) pure internal returns(Color memory color) {\\n        // AUTOGEN:START\\n\\n        if (index == 0) {\\n            color.hexNum = \\\"#000000\\\";\\n            color.name = \\\"Black\\\";\\n        }\\n        \\n        if (index == 1) {\\n            color.hexNum = \\\"#004c6a\\\";\\n            color.name = \\\"Navy Dark Blue\\\";\\n        }\\n        \\n        if (index == 2) {\\n            color.hexNum = \\\"#0098d4\\\";\\n            color.name = \\\"Bayern Blue\\\";\\n        }\\n        \\n        if (index == 3) {\\n            color.hexNum = \\\"#00e436\\\";\\n            color.name = \\\"Lexaloffle Green\\\";\\n        }\\n        \\n        if (index == 4) {\\n            color.hexNum = \\\"#1034a6\\\";\\n            color.name = \\\"Egyptian Blue\\\";\\n        }\\n        \\n        if (index == 5) {\\n            color.hexNum = \\\"#008811\\\";\\n            color.name = \\\"Lush Garden\\\";\\n        }\\n        \\n        if (index == 6) {\\n            color.hexNum = \\\"#06d078\\\";\\n            color.name = \\\"Underwater Fern\\\";\\n        }\\n        \\n        if (index == 7) {\\n            color.hexNum = \\\"#1c1cf0\\\";\\n            color.name = \\\"Bluebonnet\\\";\\n        }\\n        \\n        if (index == 8) {\\n            color.hexNum = \\\"#127453\\\";\\n            color.name = \\\"Green Velvet\\\";\\n        }\\n        \\n        if (index == 9) {\\n            color.hexNum = \\\"#14bab4\\\";\\n            color.name = \\\"Super Rare Jade\\\";\\n        }\\n        \\n        if (index == 10) {\\n            color.hexNum = \\\"#111122\\\";\\n            color.name = \\\"Corbeau\\\";\\n        }\\n        \\n        if (index == 11) {\\n            color.hexNum = \\\"#165d95\\\";\\n            color.name = \\\"Lapis Jewel\\\";\\n        }\\n        \\n        if (index == 12) {\\n            color.hexNum = \\\"#16b8f3\\\";\\n            color.name = \\\"Zima Blue\\\";\\n        }\\n        \\n        if (index == 13) {\\n            color.hexNum = \\\"#1ef876\\\";\\n            color.name = \\\"Synthetic Spearmint\\\";\\n        }\\n        \\n        if (index == 14) {\\n            color.hexNum = \\\"#214fc6\\\";\\n            color.name = \\\"New Car\\\";\\n        }\\n        \\n        if (index == 15) {\\n            color.hexNum = \\\"#249148\\\";\\n            color.name = \\\"Paperboy's Lawn\\\";\\n        }\\n        \\n        if (index == 16) {\\n            color.hexNum = \\\"#24da91\\\";\\n            color.name = \\\"Reptile Green\\\";\\n        }\\n        \\n        if (index == 17) {\\n            color.hexNum = \\\"#223311\\\";\\n            color.name = \\\"Darkest Forest\\\";\\n        }\\n        \\n        if (index == 18) {\\n            color.hexNum = \\\"#297f6d\\\";\\n            color.name = \\\"Mermaid Sea\\\";\\n        }\\n        \\n        if (index == 19) {\\n            color.hexNum = \\\"#22cccc\\\";\\n            color.name = \\\"Mermaid Net\\\";\\n        }\\n        \\n        if (index == 20) {\\n            color.hexNum = \\\"#2e2249\\\";\\n            color.name = \\\"Elderberry\\\";\\n        }\\n        \\n        if (index == 21) {\\n            color.hexNum = \\\"#326ab1\\\";\\n            color.name = \\\"Dover Straits\\\";\\n        }\\n        \\n        if (index == 22) {\\n            color.hexNum = \\\"#2bc51b\\\";\\n            color.name = \\\"Felwood Leaves\\\";\\n        }\\n        \\n        if (index == 23) {\\n            color.hexNum = \\\"#391285\\\";\\n            color.name = \\\"Pixie Powder\\\";\\n        }\\n        \\n        if (index == 24) {\\n            color.hexNum = \\\"#2e58e8\\\";\\n            color.name = \\\"Veteran's Day Blue\\\";\\n        }\\n        \\n        if (index == 25) {\\n            color.hexNum = \\\"#419f59\\\";\\n            color.name = \\\"Chateau Green\\\";\\n        }\\n        \\n        if (index == 26) {\\n            color.hexNum = \\\"#45e9c1\\\";\\n            color.name = \\\"Aphrodite Aqua\\\";\\n        }\\n        \\n        if (index == 27) {\\n            color.hexNum = \\\"#424330\\\";\\n            color.name = \\\"Garden Path\\\";\\n        }\\n        \\n        if (index == 28) {\\n            color.hexNum = \\\"#429395\\\";\\n            color.name = \\\"Catalan\\\";\\n        }\\n        \\n        if (index == 29) {\\n            color.hexNum = \\\"#44dd00\\\";\\n            color.name = \\\"Magic Blade\\\";\\n        }\\n        \\n        if (index == 30) {\\n            color.hexNum = \\\"#432e6f\\\";\\n            color.name = \\\"Her Highness\\\";\\n        }\\n        \\n        if (index == 31) {\\n            color.hexNum = \\\"#4477dd\\\";\\n            color.name = \\\"Andrea Blue\\\";\\n        }\\n        \\n        if (index == 32) {\\n            color.hexNum = \\\"#5ad33e\\\";\\n            color.name = \\\"Verdant Fields\\\";\\n        }\\n        \\n        if (index == 33) {\\n            color.hexNum = \\\"#3a18b1\\\";\\n            color.name = \\\"Indigo Blue\\\";\\n        }\\n        \\n        if (index == 34) {\\n            color.hexNum = \\\"#556611\\\";\\n            color.name = \\\"Forestial Outpost\\\";\\n        }\\n        \\n        if (index == 35) {\\n            color.hexNum = \\\"#55bb88\\\";\\n            color.name = \\\"Bleached Olive\\\";\\n        }\\n        \\n        if (index == 36) {\\n            color.hexNum = \\\"#5500ee\\\";\\n            color.name = \\\"Tezcatlipoca Blue\\\";\\n        }\\n        \\n        if (index == 37) {\\n            color.hexNum = \\\"#545554\\\";\\n            color.name = \\\"Carbon Copy\\\";\\n        }\\n        \\n        if (index == 38) {\\n            color.hexNum = \\\"#58a0bc\\\";\\n            color.name = \\\"Dupain\\\";\\n        }\\n        \\n        if (index == 39) {\\n            color.hexNum = \\\"#55ff22\\\";\\n            color.name = \\\"Traffic Green\\\";\\n        }\\n        \\n        if (index == 40) {\\n            color.hexNum = \\\"#5b3e90\\\";\\n            color.name = \\\"Daisy Bush\\\";\\n        }\\n        \\n        if (index == 41) {\\n            color.hexNum = \\\"#6688ff\\\";\\n            color.name = \\\"Deep Denim\\\";\\n        }\\n        \\n        if (index == 42) {\\n            color.hexNum = \\\"#61e160\\\";\\n            color.name = \\\"Lightish Green\\\";\\n        }\\n        \\n        if (index == 43) {\\n            color.hexNum = \\\"#6a31ca\\\";\\n            color.name = \\\"Sagat Purple\\\";\\n        }\\n        \\n        if (index == 44) {\\n            color.hexNum = \\\"#667c3e\\\";\\n            color.name = \\\"Military Green\\\";\\n        }\\n        \\n        if (index == 45) {\\n            color.hexNum = \\\"#68c89d\\\";\\n            color.name = \\\"Intense Jade\\\";\\n        }\\n        \\n        if (index == 46) {\\n            color.hexNum = \\\"#6d1008\\\";\\n            color.name = \\\"Chestnut Brown\\\";\\n        }\\n        \\n        if (index == 47) {\\n            color.hexNum = \\\"#696374\\\";\\n            color.name = \\\"Purple Punch\\\";\\n        }\\n        \\n        if (index == 48) {\\n            color.hexNum = \\\"#6fb7e0\\\";\\n            color.name = \\\"Life Force\\\";\\n        }\\n        \\n        if (index == 49) {\\n            color.hexNum = \\\"#770044\\\";\\n            color.name = \\\"Dawn of the Fairies\\\";\\n        }\\n        \\n        if (index == 50) {\\n            color.hexNum = \\\"#7851a9\\\";\\n            color.name = \\\"Royal Lavender\\\";\\n        }\\n        \\n        if (index == 51) {\\n            color.hexNum = \\\"#769c18\\\";\\n            color.name = \\\"Luminescent Green\\\";\\n        }\\n        \\n        if (index == 52) {\\n            color.hexNum = \\\"#7be892\\\";\\n            color.name = \\\"Ragweed\\\";\\n        }\\n        \\n        if (index == 53) {\\n            color.hexNum = \\\"#703be7\\\";\\n            color.name = \\\"Bluish Purple\\\";\\n        }\\n        \\n        if (index == 54) {\\n            color.hexNum = \\\"#7b8b5d\\\";\\n            color.name = \\\"Sage Leaves\\\";\\n        }\\n        \\n        if (index == 55) {\\n            color.hexNum = \\\"#82d9c5\\\";\\n            color.name = \\\"Tender Turquoise\\\";\\n        }\\n        \\n        if (index == 56) {\\n            color.hexNum = \\\"#7e2530\\\";\\n            color.name = \\\"Scarlet Shade\\\";\\n        }\\n        \\n        if (index == 57) {\\n            color.hexNum = \\\"#83769c\\\";\\n            color.name = \\\"Voxatron Purple\\\";\\n        }\\n        \\n        if (index == 58) {\\n            color.hexNum = \\\"#88cc00\\\";\\n            color.name = \\\"Fabulous Frog\\\";\\n        }\\n        \\n        if (index == 59) {\\n            color.hexNum = \\\"#881166\\\";\\n            color.name = \\\"Possessed Purple\\\";\\n        }\\n        \\n        if (index == 60) {\\n            color.hexNum = \\\"#8756e4\\\";\\n            color.name = \\\"Gloomy Purple\\\";\\n        }\\n        \\n        if (index == 61) {\\n            color.hexNum = \\\"#93b13d\\\";\\n            color.name = \\\"Green Tea Ice Cream\\\";\\n        }\\n        \\n        if (index == 62) {\\n            color.hexNum = \\\"#90fda9\\\";\\n            color.name = \\\"Foam Green\\\";\\n        }\\n        \\n        if (index == 63) {\\n            color.hexNum = \\\"#914b13\\\";\\n            color.name = \\\"Parasite Brown\\\";\\n        }\\n        \\n        if (index == 64) {\\n            color.hexNum = \\\"#919c81\\\";\\n            color.name = \\\"Whispering Willow\\\";\\n        }\\n        \\n        if (index == 65) {\\n            color.hexNum = \\\"#99eeee\\\";\\n            color.name = \\\"Freezy Breezy\\\";\\n        }\\n        \\n        if (index == 66) {\\n            color.hexNum = \\\"#983d53\\\";\\n            color.name = \\\"Algae Red\\\";\\n        }\\n        \\n        if (index == 67) {\\n            color.hexNum = \\\"#9c87c1\\\";\\n            color.name = \\\"Petrified Purple\\\";\\n        }\\n        \\n        if (index == 68) {\\n            color.hexNum = \\\"#98da2c\\\";\\n            color.name = \\\"Effervescent Lime\\\";\\n        }\\n        \\n        if (index == 69) {\\n            color.hexNum = \\\"#942193\\\";\\n            color.name = \\\"Acai Juice\\\";\\n        }\\n        \\n        if (index == 70) {\\n            color.hexNum = \\\"#a675fe\\\";\\n            color.name = \\\"Purple Illusionist\\\";\\n        }\\n        \\n        if (index == 71) {\\n            color.hexNum = \\\"#a4c161\\\";\\n            color.name = \\\"Jungle Juice\\\";\\n        }\\n        \\n        if (index == 72) {\\n            color.hexNum = \\\"#aa00cc\\\";\\n            color.name = \\\"Ferocious Fuchsia\\\";\\n        }\\n        \\n        if (index == 73) {\\n            color.hexNum = \\\"#a85e39\\\";\\n            color.name = \\\"Earthen Jug\\\";\\n        }\\n        \\n        if (index == 74) {\\n            color.hexNum = \\\"#aaa9a4\\\";\\n            color.name = \\\"Ellie Grey\\\";\\n        }\\n        \\n        if (index == 75) {\\n            color.hexNum = \\\"#aaee11\\\";\\n            color.name = \\\"Glorious Green Glitter\\\";\\n        }\\n        \\n        if (index == 76) {\\n            color.hexNum = \\\"#ad4379\\\";\\n            color.name = \\\"Mystic Maroon\\\";\\n        }\\n        \\n        if (index == 77) {\\n            color.hexNum = \\\"#b195e4\\\";\\n            color.name = \\\"Dreamy Candy Forest\\\";\\n        }\\n        \\n        if (index == 78) {\\n            color.hexNum = \\\"#b1dd52\\\";\\n            color.name = \\\"Conifer\\\";\\n        }\\n        \\n        if (index == 79) {\\n            color.hexNum = \\\"#c034af\\\";\\n            color.name = \\\"Pink Perennial\\\";\\n        }\\n        \\n        if (index == 80) {\\n            color.hexNum = \\\"#b78727\\\";\\n            color.name = \\\"University of California Gold\\\";\\n        }\\n        \\n        if (index == 81) {\\n            color.hexNum = \\\"#b9d08b\\\";\\n            color.name = \\\"Young Leaves\\\";\\n        }\\n        \\n        if (index == 82) {\\n            color.hexNum = \\\"#bb11ee\\\";\\n            color.name = \\\"Promiscuous Pink\\\";\\n        }\\n        \\n        if (index == 83) {\\n            color.hexNum = \\\"#c06960\\\";\\n            color.name = \\\"Tapestry Red\\\";\\n        }\\n        \\n        if (index == 84) {\\n            color.hexNum = \\\"#bebbc9\\\";\\n            color.name = \\\"Silverberry\\\";\\n        }\\n        \\n        if (index == 85) {\\n            color.hexNum = \\\"#bf0a30\\\";\\n            color.name = \\\"Old Glory Red\\\";\\n        }\\n        \\n        if (index == 86) {\\n            color.hexNum = \\\"#c35b99\\\";\\n            color.name = \\\"Llilacquered\\\";\\n        }\\n        \\n        if (index == 87) {\\n            color.hexNum = \\\"#caa906\\\";\\n            color.name = \\\"Christmas Gold\\\";\\n        }\\n        \\n        if (index == 88) {\\n            color.hexNum = \\\"#c2f177\\\";\\n            color.name = \\\"Cucumber Milk\\\";\\n        }\\n        \\n        if (index == 89) {\\n            color.hexNum = \\\"#d648d7\\\";\\n            color.name = \\\"Pinkish Purple\\\";\\n        }\\n        \\n        if (index == 90) {\\n            color.hexNum = \\\"#cf9346\\\";\\n            color.name = \\\"Fleshtone Shade Wash\\\";\\n        }\\n        \\n        if (index == 91) {\\n            color.hexNum = \\\"#d3e0b1\\\";\\n            color.name = \\\"Rockmelon Rind\\\";\\n        }\\n        \\n        if (index == 92) {\\n            color.hexNum = \\\"#d22d1d\\\";\\n            color.name = \\\"Pure Red\\\";\\n        }\\n        \\n        if (index == 93) {\\n            color.hexNum = \\\"#d28083\\\";\\n            color.name = \\\"Galah\\\";\\n        }\\n        \\n        if (index == 94) {\\n            color.hexNum = \\\"#d5c7e8\\\";\\n            color.name = \\\"Foggy Love\\\";\\n        }\\n        \\n        if (index == 95) {\\n            color.hexNum = \\\"#db1459\\\";\\n            color.name = \\\"Rubylicious\\\";\\n        }\\n        \\n        if (index == 96) {\\n            color.hexNum = \\\"#dd66bb\\\";\\n            color.name = \\\"Pink Charge\\\";\\n        }\\n        \\n        if (index == 97) {\\n            color.hexNum = \\\"#e2b227\\\";\\n            color.name = \\\"Gold Tips\\\";\\n        }\\n        \\n        if (index == 98) {\\n            color.hexNum = \\\"#ee0099\\\";\\n            color.name = \\\"Love Vessel\\\";\\n        }\\n        \\n        if (index == 99) {\\n            color.hexNum = \\\"#dd55ff\\\";\\n            color.name = \\\"Flaming Flamingo\\\";\\n        }\\n        \\n        if (index == 100) {\\n            color.hexNum = \\\"#eda367\\\";\\n            color.name = \\\"Adventure Orange\\\";\\n        }\\n        \\n        if (index == 101) {\\n            color.hexNum = \\\"#e9f1d0\\\";\\n            color.name = \\\"Yellowish White\\\";\\n        }\\n        \\n        if (index == 102) {\\n            color.hexNum = \\\"#ef3939\\\";\\n            color.name = \\\"Vivaldi Red\\\";\\n        }\\n        \\n        if (index == 103) {\\n            color.hexNum = \\\"#e78ea5\\\";\\n            color.name = \\\"Underwater Flare\\\";\\n        }\\n        \\n        if (index == 104) {\\n            color.hexNum = \\\"#eedd11\\\";\\n            color.name = \\\"Yellow Buzzing\\\";\\n        }\\n        \\n        if (index == 105) {\\n            color.hexNum = \\\"#ee2277\\\";\\n            color.name = \\\"Furious Fuchsia\\\";\\n        }\\n        \\n        if (index == 106) {\\n            color.hexNum = \\\"#f075e6\\\";\\n            color.name = \\\"Lian Hong Lotus Pink\\\";\\n        }\\n        \\n        if (index == 107) {\\n            color.hexNum = \\\"#f7c34c\\\";\\n            color.name = \\\"Creamy Sweet Corn\\\";\\n        }\\n        \\n        if (index == 108) {\\n            color.hexNum = \\\"#fc0fc0\\\";\\n            color.name = \\\"CGA Pink\\\";\\n        }\\n        \\n        if (index == 109) {\\n            color.hexNum = \\\"#ff6622\\\";\\n            color.name = \\\"Sparrows Fire\\\";\\n        }\\n        \\n        if (index == 110) {\\n            color.hexNum = \\\"#fbaf8d\\\";\\n            color.name = \\\"Orange Grove\\\";\\n        }\\n        \\n// AUTOGEN:END\\n    }\\n}\\n\",\"keccak256\":\"0x2f6062a011b2edbba2751e687f9505c1af7a02d8312531ab7b74061f3a79e825\",\"license\":\"MIT\"},\"contracts/InflateLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//\\n// inflate content script:\\n// var pako = require('pako')\\n// var deflate = (str) => [str.length,Buffer.from(pako.deflateRaw(Buffer.from(str, 'utf-8'), {level: 9})).toString('hex')]\\n//\\n\\n/// @notice Based on https://github.com/madler/zlib/blob/master/contrib/puff\\nlibrary InflateLib {\\n    // Maximum bits in a code\\n    uint256 constant MAXBITS = 15;\\n    // Maximum number of literal/length codes\\n    uint256 constant MAXLCODES = 286;\\n    // Maximum number of distance codes\\n    uint256 constant MAXDCODES = 30;\\n    // Maximum codes lengths to read\\n    uint256 constant MAXCODES = (MAXLCODES + MAXDCODES);\\n    // Number of fixed literal/length codes\\n    uint256 constant FIXLCODES = 288;\\n\\n    // Error codes\\n    enum ErrorCode {\\n        ERR_NONE, // 0 successful inflate\\n        ERR_NOT_TERMINATED, // 1 available inflate data did not terminate\\n        ERR_OUTPUT_EXHAUSTED, // 2 output space exhausted before completing inflate\\n        ERR_INVALID_BLOCK_TYPE, // 3 invalid block type (type == 3)\\n        ERR_STORED_LENGTH_NO_MATCH, // 4 stored block length did not match one's complement\\n        ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES, // 5 dynamic block code description: too many length or distance codes\\n        ERR_CODE_LENGTHS_CODES_INCOMPLETE, // 6 dynamic block code description: code lengths codes incomplete\\n        ERR_REPEAT_NO_FIRST_LENGTH, // 7 dynamic block code description: repeat lengths with no first length\\n        ERR_REPEAT_MORE, // 8 dynamic block code description: repeat more than specified lengths\\n        ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS, // 9 dynamic block code description: invalid literal/length code lengths\\n        ERR_INVALID_DISTANCE_CODE_LENGTHS, // 10 dynamic block code description: invalid distance code lengths\\n        ERR_MISSING_END_OF_BLOCK, // 11 dynamic block code description: missing end-of-block code\\n        ERR_INVALID_LENGTH_OR_DISTANCE_CODE, // 12 invalid literal/length or distance code in fixed or dynamic block\\n        ERR_DISTANCE_TOO_FAR, // 13 distance is too far back in fixed or dynamic block\\n        ERR_CONSTRUCT // 14 internal: error in construct()\\n    }\\n\\n    // Input and output state\\n    struct State {\\n        //////////////////\\n        // Output state //\\n        //////////////////\\n        // Output buffer\\n        bytes output;\\n        // Bytes written to out so far\\n        uint256 outcnt;\\n        /////////////////\\n        // Input state //\\n        /////////////////\\n        // Input buffer\\n        bytes input;\\n        // Bytes read so far\\n        uint256 incnt;\\n        ////////////////\\n        // Temp state //\\n        ////////////////\\n        // Bit buffer\\n        uint256 bitbuf;\\n        // Number of bits in bit buffer\\n        uint256 bitcnt;\\n        //////////////////////////\\n        // Static Huffman codes //\\n        //////////////////////////\\n        Huffman lencode;\\n        Huffman distcode;\\n    }\\n\\n    // Huffman code decoding tables\\n    struct Huffman {\\n        uint256[] counts;\\n        uint256[] symbols;\\n    }\\n\\n    function bits(State memory s, uint256 need)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Bit accumulator (can use up to 20 bits)\\n        uint256 val;\\n\\n        // Load at least need bits into val\\n        val = s.bitbuf;\\n        while (s.bitcnt < need) {\\n            if (s.incnt == s.input.length) {\\n                // Out of input\\n                return (ErrorCode.ERR_NOT_TERMINATED, 0);\\n            }\\n\\n            // Load eight bits\\n            val |= uint256(uint8(s.input[s.incnt++])) << s.bitcnt;\\n            s.bitcnt += 8;\\n        }\\n\\n        // Drop need bits and update buffer, always zero to seven bits left\\n        s.bitbuf = val >> need;\\n        s.bitcnt -= need;\\n\\n        // Return need bits, zeroing the bits above that\\n        uint256 ret = (val & ((1 << need) - 1));\\n        return (ErrorCode.ERR_NONE, ret);\\n    }\\n\\n    function _stored(State memory s) private pure returns (ErrorCode) {\\n        // Length of stored block\\n        uint256 len;\\n\\n        // Discard leftover bits from current byte (assumes s.bitcnt < 8)\\n        s.bitbuf = 0;\\n        s.bitcnt = 0;\\n\\n        // Get length and check against its one's complement\\n        if (s.incnt + 4 > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        len = uint256(uint8(s.input[s.incnt++]));\\n        len |= uint256(uint8(s.input[s.incnt++])) << 8;\\n\\n        if (\\n            uint8(s.input[s.incnt++]) != (~len & 0xFF) ||\\n            uint8(s.input[s.incnt++]) != ((~len >> 8) & 0xFF)\\n        ) {\\n            // Didn't match complement!\\n            return ErrorCode.ERR_STORED_LENGTH_NO_MATCH;\\n        }\\n\\n        // Copy len bytes from in to out\\n        if (s.incnt + len > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        if (s.outcnt + len > s.output.length) {\\n            // Not enough output space\\n            return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n        }\\n        while (len != 0) {\\n            // Note: Solidity reverts on underflow, so we decrement here\\n            len -= 1;\\n            s.output[s.outcnt++] = s.input[s.incnt++];\\n        }\\n\\n        // Done with a valid stored block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _decode(State memory s, Huffman memory h)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Current number of bits in code\\n        uint256 len;\\n        // Len bits being decoded\\n        uint256 code = 0;\\n        // First code of length len\\n        uint256 first = 0;\\n        // Number of codes of length len\\n        uint256 count;\\n        // Index of first code of length len in symbol table\\n        uint256 index = 0;\\n        // Error code\\n        ErrorCode err;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // Get next bit\\n            uint256 tempCode;\\n            (err, tempCode) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, 0);\\n            }\\n            code |= tempCode;\\n            count = h.counts[len];\\n\\n            // If length len, return symbol\\n            if (code < first + count) {\\n                return (ErrorCode.ERR_NONE, h.symbols[index + (code - first)]);\\n            }\\n            // Else update for next length\\n            index += count;\\n            first += count;\\n            first <<= 1;\\n            code <<= 1;\\n        }\\n\\n        // Ran out of codes\\n        return (ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE, 0);\\n    }\\n\\n    function _construct(\\n        Huffman memory h,\\n        uint256[] memory lengths,\\n        uint256 n,\\n        uint256 start\\n    ) private pure returns (ErrorCode) {\\n        // Current symbol when stepping through lengths[]\\n        uint256 symbol;\\n        // Current length when stepping through h.counts[]\\n        uint256 len;\\n        // Number of possible codes left of current length\\n        uint256 left;\\n        // Offsets in symbol table for each length\\n        uint256[MAXBITS + 1] memory offs;\\n\\n        // Count number of codes of each length\\n        for (len = 0; len <= MAXBITS; len++) {\\n            h.counts[len] = 0;\\n        }\\n        for (symbol = 0; symbol < n; symbol++) {\\n            // Assumes lengths are within bounds\\n            h.counts[lengths[start + symbol]]++;\\n        }\\n        // No codes!\\n        if (h.counts[0] == n) {\\n            // Complete, but decode() will fail\\n            return (ErrorCode.ERR_NONE);\\n        }\\n\\n        // Check for an over-subscribed or incomplete set of lengths\\n\\n        // One possible code of zero length\\n        left = 1;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // One more bit, double codes left\\n            left <<= 1;\\n            if (left < h.counts[len]) {\\n                // Over-subscribed--return error\\n                return ErrorCode.ERR_CONSTRUCT;\\n            }\\n            // Deduct count from possible codes\\n\\n            left -= h.counts[len];\\n        }\\n\\n        // Generate offsets into symbol table for each length for sorting\\n        offs[1] = 0;\\n        for (len = 1; len < MAXBITS; len++) {\\n            offs[len + 1] = offs[len] + h.counts[len];\\n        }\\n\\n        // Put symbols in table sorted by length, by symbol order within each length\\n        for (symbol = 0; symbol < n; symbol++) {\\n            if (lengths[start + symbol] != 0) {\\n                h.symbols[offs[lengths[start + symbol]]++] = symbol;\\n            }\\n        }\\n\\n        // Left > 0 means incomplete\\n        return left > 0 ? ErrorCode.ERR_CONSTRUCT : ErrorCode.ERR_NONE;\\n    }\\n\\n    function _codes(\\n        State memory s,\\n        Huffman memory lencode,\\n        Huffman memory distcode\\n    ) private pure returns (ErrorCode) {\\n        // Decoded symbol\\n        uint256 symbol;\\n        // Length for copy\\n        uint256 len;\\n        // Distance for copy\\n        uint256 dist;\\n        // TODO Solidity doesn't support constant arrays, but these are fixed at compile-time\\n        // Size base for length codes 257..285\\n        uint16[29] memory lens =\\n            [\\n                3,\\n                4,\\n                5,\\n                6,\\n                7,\\n                8,\\n                9,\\n                10,\\n                11,\\n                13,\\n                15,\\n                17,\\n                19,\\n                23,\\n                27,\\n                31,\\n                35,\\n                43,\\n                51,\\n                59,\\n                67,\\n                83,\\n                99,\\n                115,\\n                131,\\n                163,\\n                195,\\n                227,\\n                258\\n            ];\\n        // Extra bits for length codes 257..285\\n        uint8[29] memory lext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                1,\\n                1,\\n                2,\\n                2,\\n                2,\\n                2,\\n                3,\\n                3,\\n                3,\\n                3,\\n                4,\\n                4,\\n                4,\\n                4,\\n                5,\\n                5,\\n                5,\\n                5,\\n                0\\n            ];\\n        // Offset base for distance codes 0..29\\n        uint16[30] memory dists =\\n            [\\n                1,\\n                2,\\n                3,\\n                4,\\n                5,\\n                7,\\n                9,\\n                13,\\n                17,\\n                25,\\n                33,\\n                49,\\n                65,\\n                97,\\n                129,\\n                193,\\n                257,\\n                385,\\n                513,\\n                769,\\n                1025,\\n                1537,\\n                2049,\\n                3073,\\n                4097,\\n                6145,\\n                8193,\\n                12289,\\n                16385,\\n                24577\\n            ];\\n        // Extra bits for distance codes 0..29\\n        uint8[30] memory dext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                2,\\n                2,\\n                3,\\n                3,\\n                4,\\n                4,\\n                5,\\n                5,\\n                6,\\n                6,\\n                7,\\n                7,\\n                8,\\n                8,\\n                9,\\n                9,\\n                10,\\n                10,\\n                11,\\n                11,\\n                12,\\n                12,\\n                13,\\n                13\\n            ];\\n        // Error code\\n        ErrorCode err;\\n\\n        // Decode literals and length/distance pairs\\n        while (symbol != 256) {\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return err;\\n            }\\n\\n            if (symbol < 256) {\\n                // Literal: symbol is the byte\\n                // Write out the literal\\n                if (s.outcnt == s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                s.output[s.outcnt] = bytes1(uint8(symbol));\\n                s.outcnt++;\\n            } else if (symbol > 256) {\\n                uint256 tempBits;\\n                // Length\\n                // Get and compute length\\n                symbol -= 257;\\n                if (symbol >= 29) {\\n                    // Invalid fixed code\\n                    return ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE;\\n                }\\n\\n                (err, tempBits) = bits(s, lext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                len = lens[symbol] + tempBits;\\n\\n                // Get and check distance\\n                (err, symbol) = _decode(s, distcode);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    // Invalid symbol\\n                    return err;\\n                }\\n                (err, tempBits) = bits(s, dext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                dist = dists[symbol] + tempBits;\\n                if (dist > s.outcnt) {\\n                    // Distance too far back\\n                    return ErrorCode.ERR_DISTANCE_TOO_FAR;\\n                }\\n\\n                // Copy length bytes from distance bytes back\\n                if (s.outcnt + len > s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                while (len != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    len -= 1;\\n                    s.output[s.outcnt] = s.output[s.outcnt - dist];\\n                    s.outcnt++;\\n                }\\n            } else {\\n                s.outcnt += len;\\n            }\\n        }\\n\\n        // Done with a valid fixed or dynamic block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _build_fixed(State memory s) private pure returns (ErrorCode) {\\n        // Build fixed Huffman tables\\n        // TODO this is all a compile-time constant\\n        uint256 symbol;\\n        uint256[] memory lengths = new uint256[](FIXLCODES);\\n\\n        // Literal/length table\\n        for (symbol = 0; symbol < 144; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n        for (; symbol < 256; symbol++) {\\n            lengths[symbol] = 9;\\n        }\\n        for (; symbol < 280; symbol++) {\\n            lengths[symbol] = 7;\\n        }\\n        for (; symbol < FIXLCODES; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n\\n        _construct(s.lencode, lengths, FIXLCODES, 0);\\n\\n        // Distance table\\n        for (symbol = 0; symbol < MAXDCODES; symbol++) {\\n            lengths[symbol] = 5;\\n        }\\n\\n        _construct(s.distcode, lengths, MAXDCODES, 0);\\n\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _fixed(State memory s) private pure returns (ErrorCode) {\\n        // Decode data until end-of-block code\\n        return _codes(s, s.lencode, s.distcode);\\n    }\\n\\n    function _build_dynamic_lengths(State memory s)\\n        private\\n        pure\\n        returns (ErrorCode, uint256[] memory)\\n    {\\n        uint256 ncode;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Error code\\n        ErrorCode err;\\n        // Permutation of code length codes\\n        uint8[19] memory order =\\n            [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\\n\\n        (err, ncode) = bits(s, 4);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lengths);\\n        }\\n        ncode += 4;\\n\\n        // Read code length code lengths (really), missing lengths are zero\\n        for (index = 0; index < ncode; index++) {\\n            (err, lengths[order[index]]) = bits(s, 3);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, lengths);\\n            }\\n        }\\n        for (; index < 19; index++) {\\n            lengths[order[index]] = 0;\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lengths);\\n    }\\n\\n    function _build_dynamic(State memory s)\\n        private\\n        pure\\n        returns (\\n            ErrorCode,\\n            Huffman memory,\\n            Huffman memory\\n        )\\n    {\\n        // Number of lengths in descriptor\\n        uint256 nlen;\\n        uint256 ndist;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Error code\\n        ErrorCode err;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Length and distance codes\\n        Huffman memory lencode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXLCODES));\\n        Huffman memory distcode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES));\\n        uint256 tempBits;\\n\\n        // Get number of lengths in each table, check lengths\\n        (err, nlen) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        nlen += 257;\\n        (err, ndist) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        ndist += 1;\\n\\n        if (nlen > MAXLCODES || ndist > MAXDCODES) {\\n            // Bad counts\\n            return (\\n                ErrorCode.ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        (err, lengths) = _build_dynamic_lengths(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n\\n        // Build huffman table for code lengths codes (use lencode temporarily)\\n        err = _construct(lencode, lengths, 19, 0);\\n        if (err != ErrorCode.ERR_NONE) {\\n            // Require complete code set here\\n            return (\\n                ErrorCode.ERR_CODE_LENGTHS_CODES_INCOMPLETE,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Read length/literal and distance code length tables\\n        index = 0;\\n        while (index < nlen + ndist) {\\n            // Decoded value\\n            uint256 symbol;\\n            // Last length to repeat\\n            uint256 len;\\n\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return (err, lencode, distcode);\\n            }\\n\\n            if (symbol < 16) {\\n                // Length in 0..15\\n                lengths[index++] = symbol;\\n            } else {\\n                // Repeat instruction\\n                // Assume repeating zeros\\n                len = 0;\\n                if (symbol == 16) {\\n                    // Repeat last length 3..6 times\\n                    if (index == 0) {\\n                        // No last length!\\n                        return (\\n                            ErrorCode.ERR_REPEAT_NO_FIRST_LENGTH,\\n                            lencode,\\n                            distcode\\n                        );\\n                    }\\n                    // Last length\\n                    len = lengths[index - 1];\\n                    (err, tempBits) = bits(s, 2);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else if (symbol == 17) {\\n                    // Repeat zero 3..10 times\\n                    (err, tempBits) = bits(s, 3);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else {\\n                    // == 18, repeat zero 11..138 times\\n                    (err, tempBits) = bits(s, 7);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 11 + tempBits;\\n                }\\n\\n                if (index + symbol > nlen + ndist) {\\n                    // Too many lengths!\\n                    return (ErrorCode.ERR_REPEAT_MORE, lencode, distcode);\\n                }\\n                while (symbol != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    symbol -= 1;\\n\\n                    // Repeat last or zero symbol times\\n                    lengths[index++] = len;\\n                }\\n            }\\n        }\\n\\n        // Check for end-of-block code -- there better be one!\\n        if (lengths[256] == 0) {\\n            return (ErrorCode.ERR_MISSING_END_OF_BLOCK, lencode, distcode);\\n        }\\n\\n        // Build huffman table for literal/length codes\\n        err = _construct(lencode, lengths, nlen, 0);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                nlen != lencode.counts[0] + lencode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Build huffman table for distance codes\\n        err = _construct(distcode, lengths, ndist, nlen);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                ndist != distcode.counts[0] + distcode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_DISTANCE_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lencode, distcode);\\n    }\\n\\n    function _dynamic(State memory s) private pure returns (ErrorCode) {\\n        // Length and distance codes\\n        Huffman memory lencode;\\n        Huffman memory distcode;\\n        // Error code\\n        ErrorCode err;\\n\\n        (err, lencode, distcode) = _build_dynamic(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return err;\\n        }\\n\\n        // Decode data until end-of-block code\\n        return _codes(s, lencode, distcode);\\n    }\\n\\n    function puff(bytes memory source, uint256 destlen)\\n        internal\\n        pure\\n        returns (ErrorCode, bytes memory)\\n    {\\n        // Input/output state\\n        State memory s =\\n            State(\\n                new bytes(destlen),\\n                0,\\n                source,\\n                0,\\n                0,\\n                0,\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](FIXLCODES)),\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES))\\n            );\\n        // Temp: last bit\\n        uint256 last;\\n        // Temp: block type bit\\n        uint256 t;\\n        // Error code\\n        ErrorCode err;\\n\\n        // Build fixed Huffman tables\\n        err = _build_fixed(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, s.output);\\n        }\\n\\n        // Process blocks until last block or error\\n        while (last == 0) {\\n            // One if last block\\n            (err, last) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            // Block type 0..3\\n            (err, t) = bits(s, 2);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            err = (\\n                t == 0\\n                    ? _stored(s)\\n                    : (\\n                        t == 1\\n                            ? _fixed(s)\\n                            : (\\n                                t == 2\\n                                    ? _dynamic(s)\\n                                    : ErrorCode.ERR_INVALID_BLOCK_TYPE\\n                            )\\n                    )\\n            );\\n            // type == 3, invalid\\n\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Return with error\\n                break;\\n            }\\n        }\\n\\n        return (err, s.output);\\n    }\\n}\\n\",\"keccak256\":\"0x30e7ed53c66fef1587d3e47587193272dd6184ed1010bb0418aa8de041818ef5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620059bb380380620059bb83398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c0516158cc620000ef60003960006101c4015260006101150152600061050401526158cc6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063338dc74e1461003b57806390accf5614610068575b600080fd5b61004e610049366004615180565b610089565b60405161005f9594939291906151f5565b60405180910390f35b61007b61007636600461534d565b610253565b60405161005f9291906153ea565b60608080808060006100a6606463ffffffff609f8a901c16615425565b905060006100b98263ffffffff16610274565b905060006100d2604563ffffffff60208c901c16615425565b90506000806100e08b610421565b9150915060608060328563ffffffff1610156101a55760405163586e3c7d60e11b815263ffffffff8616600482015261019c907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa906024015b60006040518083038186803b15801561016057600080fd5b505afa158015610174573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100769190810190615498565b92509050610200565b60405163586e3c7d60e11b815263ffffffff861660048201526101fb907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa90602401610148565b925090505b8351835161020f919088610500565b82604051602001610221929190615551565b60408051601f198184030181529190526020948501519390940151939d909c50919a5091985092965091945050505050565b606080600061026a846020015185604001516105cf565b9451959350505050565b60608115806102835750816063145b156102a95750506040805180820190915260058152646e6f69736560d81b602082015290565b81600114806102b85750816002145b806102c35750816003145b806102ce5750816004145b806102d95750816005145b156102fd5750506040805180820190915260038152621b1a5d60ea1b602082015290565b816007148061030c5750816008145b806103175750816009145b156103405750506040805180820190915260088152677363726962626c6560c01b602082015290565b600a61034d8360646155a7565b101580156103655750601e6103638360646155a7565b105b1561038b5750506040805180820190915260058152640dadee4e0d60db1b602082015290565b601e6103988360646155a7565b101580156103b0575060286103ae8360646155a7565b105b156103d5575050604080518082019091526004815263676c6f7760e01b602082015290565b8160451415610401575050604080518082019091526007815266199c9858dd185b60ca1b602082015290565b50506040805180820190915260048152636e6f6e6560e01b602082015290565b60408051808201909152606080825260208201526040805180820190915260608082526020820152600061045a606f60e086901c615425565b90506000610473600563ffffffff60c088901c16615425565b90506000610489600260ff60b889901c166155be565b60ff1690506000816104bd57606f6104a28460376155e0565b6104ac90866155e0565b6104b69190615425565b90506104e1565b606f6104ca846037615608565b6104d490866155e0565b6104de9190615425565b90505b6104ea84610880565b6104f382610880565b9550955050505050915091565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d37bc7c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610597919081019061562d565b61059f612ebe565b8385876040516020016105b6959493929190615675565b60405160208183030381529060405290505b9392505050565b600060606000604051806101000160405280856001600160401b038111156105f9576105f9615262565b6040519080825280601f01601f191660200182016040528015610623576020820181803683370190505b508152602001600081526020018681526020016000815260200160008152602001600081526020016040518060400160405280600f60016106649190615837565b6001600160401b0381111561067b5761067b615262565b6040519080825280602002602001820160405280156106a4578160200160208202803683370190505b5081526040805161012080825261242082019092526020928301929091908201612400803683370190505081525081526020016040518060400160405280600f60016106f09190615837565b6001600160401b0381111561070757610707615262565b604051908082528060200260200182016040528015610730578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c0803683375050509052905290506000808061076c84613784565b9050600081600e8111156107825761078261584f565b14610797579251929450919250610879915050565b8261086e576107a784600161390e565b93509050600081600e8111156107bf576107bf61584f565b146107d4579251929450919250610879915050565b6107df84600261390e565b92509050600081600e8111156107f7576107f761584f565b1461080c579251929450919250610879915050565b811561084057816001146108375781600214610829576003610849565b610832846139df565b610849565b61083284613a59565b61084984613a74565b9050600081600e81111561085f5761085f61584f565b146108695761086e565b610797565b925192945091925050505b9250929050565b604080518082019091526060808252602082015263ffffffff82166108e05760408051808201825260078152660233030303030360cc1b60208083019190915290835281518083019092526005825264426c61636b60d81b828201528201525b8163ffffffff16600114156109395760408051808201825260078152662330303463366160c81b6020808301919091529083528151808301909252600e82526d4e617679204461726b20426c756560901b828201528201525b8163ffffffff166002141561098f57604080518082018252600781526608cc0c0e4e190d60ca1b6020808301919091529083528151808301909252600b82526a42617965726e20426c756560a81b828201528201525b8163ffffffff16600314156109ea576040805180820182526007815266119818329a199b60c91b6020808301919091529083528151808301909252601082526f2632bc30b637b33336329023b932b2b760811b828201528201525b8163ffffffff1660041415610a42576040805180820182526007815266119898199a309b60c91b6020808301919091529083528151808301909252600d82526c456779707469616e20426c756560981b828201528201525b8163ffffffff1660051415610a985760408051808201825260078152662330303838313160c81b6020808301919091529083528151808301909252600b82526a263ab9b41023b0b93232b760a91b828201528201525b8163ffffffff1660061415610af2576040805180820182526007815266046606cc8606e760cb1b6020808301919091529083528151808301909252600f82526e2ab73232b93bb0ba32b9102332b93760891b828201528201525b8163ffffffff1660071415610b475760408051808201825260078152660233163316366360cc1b6020808301919091529083528151808301909252600a825269109b1d59589bdb9b995d60b21b828201528201525b8163ffffffff1660081415610b9e5760408051808201825260078152662331323734353360c81b6020808301919091529083528151808301909252600c82526b11dc99595b8815995b1d995d60a21b828201528201525b8163ffffffff1660091415610bf857604080518082018252600781526608cc4d1898588d60ca1b6020808301919091529083528151808301909252600f82526e53757065722052617265204a61646560881b828201528201525b8163ffffffff16600a1415610c49576040805180820182526007808252661198989898991960c91b6020808401919091529184528251808401909352825266436f726265617560c81b828201528201525b8163ffffffff16600b1415610c9f5760408051808201825260078152662331363564393560c81b6020808301919091529083528151808301909252600b82526a13185c1a5cc812995dd95b60aa1b828201528201525b8163ffffffff16600c1415610cf35760408051808201825260078152662331366238663360c81b602080830191909152908352815180830190925260098252685a696d6120426c756560b81b828201528201525b8163ffffffff16600d1415610d515760408051808201825260078152661198b2b31c1b9b60c91b6020808301919091529083528151808301909252601382527214de5b9d1a195d1a58c814dc19585c9b5a5b9d606a1b828201528201525b8163ffffffff16600e1415610da2576040805180820182526007808252661199189a33319b60c91b60208084019190915291845282518084019093528252662732bb9021b0b960c91b828201528201525b8163ffffffff16600f1415610dfc5760408051808201825260078152660466468726268760cb1b6020808301919091529083528151808301909252600f82526e2830b832b93137bc93b9902630bbb760891b828201528201525b8163ffffffff1660101415610e545760408051808201825260078152662332346461393160c81b6020808301919091529083528151808301909252600d82526c2932b83a34b6329023b932b2b760991b828201528201525b8163ffffffff1660111415610ead5760408051808201825260078152662332323333313160c81b6020808301919091529083528151808301909252600e82526d11185c9ad95cdd08119bdc995cdd60921b828201528201525b8163ffffffff1660121415610f0357604080518082018252600781526608cc8e4dd98d9960ca1b6020808301919091529083528151808301909252600b82526a4d65726d6169642053656160a81b828201528201525b8163ffffffff1660131415610f595760408051808201825260078152662332326363636360c81b6020808301919091529083528151808301909252600b82526a13595c9b585a590813995d60aa1b828201528201525b8163ffffffff1660141415610fae5760408051808201825260078152662332653232343960c81b6020808301919091529083528151808301909252600a825269456c646572626572727960b01b828201528201525b8163ffffffff16601514156110065760408051808201825260078152662333323661623160c81b6020808301919091529083528151808301909252600d82526c446f766572205374726169747360981b828201528201525b8163ffffffff166016141561105f576040805180820182526007815266119931319a98b160c91b6020808301919091529083528151808301909252600e82526d46656c776f6f64204c656176657360901b828201528201525b8163ffffffff16601714156110b65760408051808201825260078152662333393132383560c81b6020808301919091529083528151808301909252600c82526b2834bc34b2902837bbb232b960a11b828201528201525b8163ffffffff166018141561111357604080518082018252600781526604664ca6a70ca760cb1b602080830191909152908352815180830190925260128252715665746572616e27732044617920426c756560701b828201528201525b8163ffffffff166019141561116b5760408051808201825260078152662334313966353960c81b6020808301919091529083528151808301909252600d82526c21b430ba32b0ba9023b932b2b760991b828201528201525b8163ffffffff16601a14156111c45760408051808201825260078152662334356539633160c81b6020808301919091529083528151808301909252600e82526d417068726f64697465204171756160901b828201528201525b8163ffffffff16601b141561121a5760408051808201825260078152660233432343333360cc1b6020808301919091529083528151808301909252600b82526a08ec2e4c8cadc40a0c2e8d60ab1b828201528201525b8163ffffffff16601c141561126b576040805180820182526007808252662334323933393560c81b602080840191909152918452825180840190935282526621b0ba30b630b760c91b828201528201525b8163ffffffff16601d14156112c15760408051808201825260078152660233434646430360cc1b6020808301919091529083528151808301909252600b82526a4d6167696320426c61646560a81b828201528201525b8163ffffffff16601e1415611318576040805180820182526007815266119a1999329b3360c91b6020808301919091529083528151808301909252600c82526b48657220486967686e65737360a01b828201528201525b8163ffffffff16601f141561136e57604080518082018252600781526608cd0d0dcdd91960ca1b6020808301919091529083528151808301909252600b82526a416e6472656120426c756560a81b828201528201525b8163ffffffff16602014156113c75760408051808201825260078152662335616433336560c81b6020808301919091529083528151808301909252600e82526d56657264616e74204669656c647360901b828201528201525b8163ffffffff166021141561141d5760408051808201825260078152662333613138623160c81b6020808301919091529083528151808301909252600b82526a496e6469676f20426c756560a81b828201528201525b8163ffffffff16602214156114795760408051808201825260078152662335353636313160c81b60208083019190915290835281518083019092526011825270119bdc995cdd1a585b0813dd5d1c1bdcdd607a1b828201528201525b8163ffffffff16602314156114d25760408051808201825260078152660466a6ac4c470760cb1b6020808301919091529083528151808301909252600e82526d426c656163686564204f6c69766560901b828201528201525b8163ffffffff166024141561152e5760408051808201825260078152662335353030656560c81b6020808301919091529083528151808301909252601182527054657a6361746c69706f636120426c756560781b828201528201525b8163ffffffff166025141561158457604080518082018252600781526608cd4d0d4d4d4d60ca1b6020808301919091529083528151808301909252600b82526a436172626f6e20436f707960a81b828201528201525b8163ffffffff16602614156115d55760408051808201825260078152662335386130626360c81b60208083019190915290835281518083019092526006825265223ab830b4b760d11b828201528201525b8163ffffffff166027141561162d576040805180820182526007815266119a9ab333191960c91b6020808301919091529083528151808301909252600d82526c2a3930b33334b19023b932b2b760991b828201528201525b8163ffffffff16602814156116825760408051808201825260078152660233562336539360cc1b6020808301919091529083528151808301909252600a825269088c2d2e6f24084eae6d60b31b828201528201525b8163ffffffff16602914156116d7576040805180820182526007815266119b1b1c1c333360c91b6020808301919091529083528151808301909252600a825269446565702044656e696d60b01b828201528201525b8163ffffffff16602a14156117305760408051808201825260078152660233631653136360cc1b6020808301919091529083528151808301909252600e82526d2634b3b43a34b9b41023b932b2b760911b828201528201525b8163ffffffff16602b14156117875760408051808201825260078152662336613331636160c81b6020808301919091529083528151808301909252600c82526b536167617420507572706c6560a01b828201528201525b8163ffffffff16602c14156117e05760408051808201825260078152662336363763336560c81b6020808301919091529083528151808301909252600e82526d26b4b634ba30b93c9023b932b2b760911b828201528201525b8163ffffffff16602d141561183757604080518082018252600781526608cd8e18ce0e5960ca1b6020808301919091529083528151808301909252600c82526b496e74656e7365204a61646560a01b828201528201525b8163ffffffff16602e14156118905760408051808201825260078152660466cc8626060760cb1b6020808301919091529083528151808301909252600e82526d21b432b9ba373aba10213937bbb760911b828201528201525b8163ffffffff16602f14156118e757604080518082018252600781526608cd8e4d8ccdcd60ca1b6020808301919091529083528151808301909252600c82526b0a0eae4e0d8ca40a0eadcc6d60a31b828201528201525b8163ffffffff166030141561193c5760408051808201825260078152660233666623765360cc1b6020808301919091529083528151808301909252600a8252694c69666520466f72636560b01b828201528201525b8163ffffffff166031141561199a57604080518082018252600781526608cdcdcc0c0d0d60ca1b602080830191909152908352815180830190925260138252724461776e206f6620746865204661697269657360681b828201528201525b8163ffffffff16603214156119f35760408051808201825260078152662337383531613960c81b6020808301919091529083528151808301909252600e82526d2937bcb0b6102630bb32b73232b960911b828201528201525b8163ffffffff1660331415611a4f5760408051808201825260078152660466e6c72c662760cb1b60208083019190915290835281518083019092526011825270263ab6b4b732b9b1b2b73a1023b932b2b760791b828201528201525b8163ffffffff1660341415611aa057604080518082018252600780825266119bb1329c1c9960c91b6020808401919091529184528251808401909352825266149859ddd9595960ca1b828201528201525b8163ffffffff1660351415611af85760408051808201825260078152662337303362653760c81b6020808301919091529083528151808301909252600d82526c426c7569736820507572706c6560981b828201528201525b8163ffffffff1660361415611b4e57604080518082018252600781526608cdd88e188d5960ca1b6020808301919091529083528151808301909252600b82526a53616765204c656176657360a81b828201528201525b8163ffffffff1660371415611ba95760408051808201825260078152662338326439633560c81b6020808301919091529083528151808301909252601082526f54656e6465722054757271756f69736560801b828201528201525b8163ffffffff1660381415611c015760408051808201825260078152660233765323533360cc1b6020808301919091529083528151808301909252600d82526c536361726c657420536861646560981b828201528201525b8163ffffffff1660391415611c5b5760408051808201825260078152662338333736396360c81b6020808301919091529083528151808301909252600f82526e566f786174726f6e20507572706c6560881b828201528201525b8163ffffffff16603a1415611cb35760408051808201825260078152660233838636330360cc1b6020808301919091529083528151808301909252600d82526c466162756c6f75732046726f6760981b828201528201525b8163ffffffff16603b1415611d0e576040805180820182526007815266119c1c18989b1b60c91b6020808301919091529083528151808301909252601082526f506f7373657373656420507572706c6560801b828201528201525b8163ffffffff16603c1415611d6657604080518082018252600781526608ce0dcd4d994d60ca1b6020808301919091529083528151808301909252600d82526c476c6f6f6d7920507572706c6560981b828201528201525b8163ffffffff16603d1415611dc457604080518082018252600781526608ce4cd88c4cd960ca1b60208083019190915290835281518083019092526013825272477265656e205465612049636520437265616d60681b828201528201525b8163ffffffff16603e1415611e195760408051808201825260078152662339306664613960c81b6020808301919091529083528151808301909252600a8252692337b0b69023b932b2b760b11b828201528201525b8163ffffffff16603f1415611e725760408051808201825260078152662339313462313360c81b6020808301919091529083528151808301909252600e82526d2830b930b9b4ba3290213937bbb760911b828201528201525b8163ffffffff1660401415611ece5760408051808201825260078152662339313963383160c81b6020808301919091529083528151808301909252601182527057686973706572696e672057696c6c6f7760781b828201528201525b8163ffffffff1660411415611f265760408051808201825260078152662339396565656560c81b6020808301919091529083528151808301909252600d82526c467265657a7920427265657a7960981b828201528201525b8163ffffffff1660421415611f7a5760408051808201825260078152662339383364353360c81b60208083019190915290835281518083019092526009825268105b19d8594814995960ba1b828201528201525b8163ffffffff1660431415611fd55760408051808201825260078152662339633837633160c81b6020808301919091529083528151808301909252601082526f50657472696669656420507572706c6560801b828201528201525b8163ffffffff16604414156120315760408051808201825260078152662339386461326360c81b60208083019190915290835281518083019092526011825270456666657276657363656e74204c696d6560781b828201528201525b8163ffffffff16604514156120865760408051808201825260078152662339343231393360c81b6020808301919091529083528151808301909252600a82526941636169204a7569636560b01b828201528201525b8163ffffffff16604614156120e35760408051808201825260078152662361363735666560c81b60208083019190915290835281518083019092526012825271141d5c9c1b1948125b1b1d5cda5bdb9a5cdd60721b828201528201525b8163ffffffff166047141561213a5760408051808201825260078152662361346331363160c81b6020808301919091529083528151808301909252600c82526b4a756e676c65204a7569636560a01b828201528201525b8163ffffffff16604814156121965760408051808201825260078152662361613030636360c81b602080830191909152908352815180830190925260118252704665726f63696f7573204675636873696160781b828201528201525b8163ffffffff16604914156121ec5760408051808201825260078152662361383565333960c81b6020808301919091529083528151808301909252600b82526a4561727468656e204a756760a81b828201528201525b8163ffffffff16604a141561224157604080518082018252600781526608d858584e584d60ca1b6020808301919091529083528151808301909252600a825269456c6c6965204772657960b01b828201528201525b8163ffffffff16604b14156122a25760408051808201825260078152662361616565313160c81b6020808301919091529083528151808301909252601682527523b637b934b7bab99023b932b2b71023b634ba3a32b960511b828201528201525b8163ffffffff16604c14156122fa5760408051808201825260078152662361643433373960c81b6020808301919091529083528151808301909252600d82526c26bcb9ba34b19026b0b937b7b760991b828201528201525b8163ffffffff16604d141561235857604080518082018252600781526608d88c4e4d594d60ca1b60208083019190915290835281518083019092526013825272111c99585b5e4810d85b991e48119bdc995cdd606a1b828201528201525b8163ffffffff16604e14156123a95760408051808201825260078082526611b118b2321a9960c91b602080840191909152918452825180840190935282526621b7b734b332b960c91b828201528201525b8163ffffffff16604f141561240257604080518082018252600781526611b198199a30b360c91b6020808301919091529083528151808301909252600e82526d141a5b9ac814195c995b9b9a585b60921b828201528201525b8163ffffffff166050141561246a5760408051808201825260078152662362373837323760c81b6020808301919091529083528151808301909252601d82527f556e6976657273697479206f662043616c69666f726e696120476f6c64000000828201528201525b8163ffffffff16605114156124c157604080518082018252600781526611b11cb2181c3160c91b6020808301919091529083528151808301909252600c82526b596f756e67204c656176657360a01b828201528201525b8163ffffffff166052141561251c5760408051808201825260078152662362623131656560c81b6020808301919091529083528151808301909252601082526f50726f6d697363756f75732050696e6b60801b828201528201525b8163ffffffff16605314156125735760408051808201825260078152660236330363936360cc1b6020808301919091529083528151808301909252600c82526b15185c195cdd1c9e4814995960a21b828201528201525b8163ffffffff16605414156125c95760408051808201825260078152662362656262633960c81b6020808301919091529083528151808301909252600b82526a53696c766572626572727960a81b828201528201525b8163ffffffff16605514156126215760408051808201825260078152660236266306133360cc1b6020808301919091529083528151808301909252600d82526c13db190811db1bdc9e48149959609a1b828201528201525b8163ffffffff16605614156126785760408051808201825260078152662363333562393960c81b6020808301919091529083528151808301909252600c82526b131b1a5b1858dc5d595c995960a21b828201528201525b8163ffffffff16605714156126d157604080518082018252600781526611b1b0b09c981b60c91b6020808301919091529083528151808301909252600e82526d10da1c9a5cdd1b585cc811dbdb1960921b828201528201525b8163ffffffff16605814156127295760408051808201825260078152662363326631373760c81b6020808301919091529083528151808301909252600d82526c437563756d626572204d696c6b60981b828201528201525b8163ffffffff16605914156127825760408051808201825260078152662364363438643760c81b6020808301919091529083528151808301909252600e82526d50696e6b69736820507572706c6560901b828201528201525b8163ffffffff16605a14156127e157604080518082018252600781526611b1b31c999a1b60c91b6020808301919091529083528151808301909252601482527308cd8cae6d0e8dedcca40a6d0c2c8ca40aec2e6d60631b828201528201525b8163ffffffff16605b141561283a5760408051808201825260078152662364336530623160c81b6020808301919091529083528151808301909252600e82526d149bd8dadb595b1bdb88149a5b9960921b828201528201525b8163ffffffff16605c141561288d57604080518082018252600781526608d90c8c990c5960ca1b60208083019190915290835281518083019092526008825267141d5c994814995960c21b828201528201525b8163ffffffff16605d14156128dd5760408051808201825260078152662364323830383360c81b6020808301919091529083528151808301909252600582526408ec2d8c2d60db1b828201528201525b8163ffffffff16605e1415612932576040805180820182526007815266046c86ac66eca760cb1b6020808301919091529083528151808301909252600a825269466f676779204c6f766560b01b828201528201525b8163ffffffff16605f14156129885760408051808201825260078152662364623134353960c81b6020808301919091529083528151808301909252600b82526a527562796c6963696f757360a81b828201528201525b8163ffffffff16606014156129de57604080518082018252600781526611b2321b1b313160c91b6020808301919091529083528151808301909252600b82526a50696e6b2043686172676560a81b828201528201525b8163ffffffff1660611415612a325760408051808201825260078152662365326232323760c81b60208083019190915290835281518083019092526009825268476f6c64205469707360b81b828201528201525b8163ffffffff1660621415612a885760408051808201825260078152662365653030393960c81b6020808301919091529083528151808301909252600b82526a131bdd994815995cdcd95b60aa1b828201528201525b8163ffffffff1660631415612ae357604080518082018252600781526611b2321a9ab33360c91b6020808301919091529083528151808301909252601082526f466c616d696e6720466c616d696e676f60801b828201528201525b8163ffffffff1660641415612b3e5760408051808201825260078152662365646133363760c81b6020808301919091529083528151808301909252601082526f416476656e74757265204f72616e676560801b828201528201525b8163ffffffff1660651415612b985760408051808201825260078152660236539663164360cc1b6020808301919091529083528151808301909252600f82526e59656c6c6f7769736820576869746560881b828201528201525b8163ffffffff1660661415612bee5760408051808201825260078152662365663339333960c81b6020808301919091529083528151808301909252600b82526a159a5d985b191a4814995960aa1b828201528201525b8163ffffffff1660671415612c495760408051808201825260078152662365373865613560c81b6020808301919091529083528151808301909252601082526f556e646572776174657220466c61726560801b828201528201525b8163ffffffff1660681415612ca25760408051808201825260078152662365656464313160c81b6020808301919091529083528151808301909252600e82526d59656c6c6f772042757a7a696e6760901b828201528201525b8163ffffffff1660691415612cfc5760408051808201825260078152662365653232373760c81b6020808301919091529083528151808301909252600f82526e467572696f7573204675636873696160881b828201528201525b8163ffffffff16606a1415612d5b57604080518082018252600781526611b3181b9ab29b60c91b602080830191909152908352815180830190925260148252734c69616e20486f6e67204c6f7475732050696e6b60601b828201528201525b8163ffffffff16606b1415612db75760408051808201825260078152662366376333346360c81b6020808301919091529083528151808301909252601182527021b932b0b6bc9029bbb2b2ba1021b7b93760791b828201528201525b8163ffffffff16606c1415612e0a5760408051808201825260078152660236663306663360cc1b602080830191909152908352815180830190925260088252674347412050696e6b60c01b828201528201525b8163ffffffff16606d1415612e6257604080518082018252600781526611b3331b1b191960c91b6020808301919091529083528151808301909252600d82526c53706172726f7773204669726560981b828201528201525b8163ffffffff16606e1415612eb957604080518082018252600781526608d99898598e1960ca1b6020808301919091529083528151808301909252600c82526b4f72616e67652047726f766560a01b828201528201525b919050565b6060604051602001613770907f3c646566733e3c66696c7465722069643d226672616374616c222066696c746581527f72556e6974733d226f626a656374426f756e64696e67426f782220783d22302560208201527f2220793d223025222077696474683d223130302522206865696768743d22313060408201527f302522203e3c666554757262756c656e63652069643d2274757262756c656e6360608201527f652220747970653d226672616374616c4e6f697365222062617365467265717560808201527f656e63793d22302e303322206e756d4f6374617665733d223122203e3c616e6960a08201527f6d617465206174747269627574654e616d653d22626173654672657175656e6360c08201527f79222076616c7565733d22302e30313b302e343b302e303122206475723d223160e08201527f3030732220726570656174436f756e743d22696e646566696e69746522202f3e6101008201527f3c2f666554757262756c656e63653e3c6665446973706c6163656d656e744d616101208201527f7020696e3d22536f757263654772617068696322207363616c653d223530223e6101408201527f3c2f6665446973706c6163656d656e744d61703e3c2f66696c7465723e3c66696101608201527f6c7465722069643d226d6f727068223e3c66654d6f7270686f6c6f6779206f706101808201527f657261746f723d2264696c61746522207261646975733d2230223e3c616e696d6101a08201527f617465206174747269627574654e616d653d22726164697573222076616c75656101c08201527f733d22303b353b3022206475723d2238732220726570656174436f756e743d226101e08201527f696e646566696e69746522202f3e3c2f66654d6f7270686f6c6f67793e3c2f666102008201527f696c7465723e3c66696c7465722069643d22676c6f77222066696c746572556e6102208201527f6974733d226f626a656374426f756e64696e67426f782220783d2230252220796102408201527f3d223025222077696474683d223130302522206865696768743d2231303025226102608201527f203e3c6665476175737369616e426c757220737464446576696174696f6e3d226102808201527f352220726573756c743d22626c7572322220696e3d22536f75726365477261706102a08201527f68696322202f3e3c66654d657267653e3c66654d657267654e6f646520696e3d6102c08201527f22626c75723222202f3e3c66654d657267654e6f646520696e3d22536f7572636102e08201527f654772617068696322202f3e3c2f66654d657267653e3c2f66696c7465723e3c6103008201527f66696c7465722069643d226e6f697365223e3c666554757262756c656e6365206103208201527f626173654672657175656e63793d22302e3035222f3e3c6665436f6c6f724d616103408201527f7472697820747970653d22687565526f74617465222076616c7565733d2230226103608201527f3e3c616e696d617465206174747269627574654e616d653d2276616c756573226103808201527f2066726f6d3d22302220746f3d2233363022206475723d2231732220726570656103a08201527f6174436f756e743d22696e646566696e697465222f3e3c2f6665436f6c6f724d6103c08201527f61747269783e3c6665436f6c6f724d617472697820747970653d226d617472696103e08201527f78222076616c7565733d223020302030203020312030203020302030203020306104008201527f203020302030203020312030203020302030222f3e3c6665446973706c6163656104208201527f6d656e744d617020696e3d22536f757263654772617068696322207363616c656104408201527f3d223130222f3e3c2f66696c7465723e3c66696c7465722069643d226e6f6e656104608201527f223e3c66654f66667365743e3c2f66654f66667365743e3c2f66696c7465723e6104808201527f3c66696c7465722069643d227363726962626c65223e3c666554757262756c656104a08201527f6e636520747970653d2274757262756c656e63652220626173654672657175656104c08201527f6e63793d22302e303522206e756d4f6374617665733d22322220726573756c746104e08201527f3d2274757262756c656e6365222f3e3c6665446973706c6163656d656e744d616105008201527f7020696e323d2274757262756c656e63652220696e3d22536f757263654772616105208201527f7068696322207363616c653d2235302220784368616e6e656c53656c6563746f6105408201527f723d22522220794368616e6e656c53656c6563746f723d2247222f3e3c2f66696105608201527f6c7465723e3c66696c7465722069643d2274696c652220783d2231302220793d6105808201527f223130222077696474683d2231302522206865696768743d22313025223e3c666105a08201527f6554696c6520696e3d22536f75726365477261706869632220783d22313022206105c08201527f793d223130222077696474683d22313022206865696768743d22313022202f3e6105e08201527f3c666554696c652f3e3c2f66696c7465723e3c66696c746572206964203d20226106008201527f6c69742220783d222d33302220793d222d3330222077696474683d22363430226106208201527f206865696768743d22363430223e3c666554757262756c656e636520747970656106408201527f3d2274757262756c656e63652220626173654672657175656e63793d22302e306106608201527f3122206e756d4f6374617665733d22322220726573756c743d2274757262756c6106808201527f656e6365222f3e3c6665436f6d706f7369746520696e3d22536f7572636547726106a08201527f61706869632220696e323d22737065634f757422206f70657261746f723d22616106c08201527f726974686d6574696322206b313d223022206b323d223122206b333d223122206106e082015277359a1e911811179f1e17b334b63a32b91f1e17b232b3399f60411b6107008201526107180190565b604051602081830303815290604052905090565b604080516101208082526124208201909252600091829182916020820161240080368337019050509050600091505b60908210156137ed5760088183815181106137d0576137d0615865565b6020908102919091010152816137e58161587b565b9250506137b3565b61010082101561382857600981838151811061380b5761380b615865565b6020908102919091010152816138208161587b565b9250506137ed565b61011882101561386357600781838151811061384657613846615865565b60209081029190910101528161385b8161587b565b925050613828565b61012082101561389e57600881838151811061388157613881615865565b6020908102919091010152816138968161587b565b925050613863565b6138b18460c00151826101206000613c84565b50600091505b601e8210156138f15760058183815181106138d4576138d4615865565b6020908102919091010152816138e98161587b565b9250506138b7565b6139038460e0015182601e6000613c84565b506000949350505050565b608082015160009081905b838560a0015110156139a2578460400151518560600151141561394457600160009250925050610879565b60a085015160408601516060870180519061395e8261587b565b90528151811061397057613970615865565b602001015160f81c60f81b60f81c60ff16901b8117905060088560a00181815161399a9190615837565b905250613919565b80841c608086015260a0850180518591906139be9083906155a7565b90525060006139d0600180871b6155a7565b60009792169550909350505050565b60006139fe604051806040016040528060608152602001606081525090565b60408051808201909152606080825260208201526000613a1d85613f4f565b90945092509050600081600e811115613a3857613a3861584f565b14613a4557949350505050565b613a50858484614605565b95945050505050565b6000613a6e828360c001518460e00151614605565b92915050565b60006080820181905260a082018190526040820151516060830151829190613a9d906004615837565b1115613aac5750600192915050565b604083015160608401805190613ac18261587b565b905281518110613ad357613ad3615865565b0160200151604084015160608501805160f89390931c935060089290613af88261587b565b905281518110613b0a57613b0a615865565b602001015160f81c60f81b60f81c60ff16901b81179050801960ff168360400151846060018051809190613b3d9061587b565b905281518110613b4f57613b4f615865565b016020015160f81c141580613b9a5750604083015160608401805160ff841960081c169291613b7d8261587b565b905281518110613b8f57613b8f615865565b016020015160f81c14155b15613ba85750600492915050565b826040015151818460600151613bbe9190615837565b1115613bcd5750600192915050565b8251516020840151613be0908390615837565b1115613bef5750600292915050565b8015613c7b57613c006001826155a7565b90508260400151836060018051809190613c199061587b565b905281518110613c2b57613c2b615865565b602001015160f81c60f81b8360000151846020018051809190613c4d9061587b565b905281518110613c5f57613c5f615865565b60200101906001600160f81b031916908160001a905350613bef565b50600092915050565b600080600080613c92615161565b600092505b600f8311613cd457600089600001518481518110613cb757613cb7615865565b602090810291909101015282613ccc8161587b565b935050613c97565b600093505b86841015613d4057885188613cee8689615837565b81518110613cfe57613cfe615865565b602002602001015181518110613d1657613d16615865565b602002602001018051809190613d2b9061587b565b90525083613d388161587b565b945050613cd9565b868960000151600081518110613d5857613d58615865565b60200260200101511415613d73576000945050505050613f47565b60019150600192505b600f8311613df6578851805160019390931b9284908110613d9f57613d9f615865565b6020026020010151821015613dbb57600e945050505050613f47565b8851805184908110613dcf57613dcf615865565b602002602001015182613de291906155a7565b915082613dee8161587b565b935050613d7c565b60006020820152600192505b600f831015613e7b578851805184908110613e1f57613e1f615865565b6020026020010151818460108110613e3957613e39615865565b6020020151613e489190615837565b81613e54856001615837565b60108110613e6457613e64615865565b602002015282613e738161587b565b935050613e02565b600093505b86841015613f2e5787613e938588615837565b81518110613ea357613ea3615865565b6020026020010151600014613f1c5760208901518490828a613ec5848b615837565b81518110613ed557613ed5615865565b602002602001015160108110613eed57613eed615865565b60200201805190613efd8261587b565b905281518110613f0f57613f0f615865565b6020026020010181815250505b83613f268161587b565b945050613e80565b60008211613f3d576000613f40565b600e5b9450505050505b949350505050565b6000613f6e604051806040016040528060608152602001606081525090565b6040805180820190915260608082526020820152600080808080613f95601e61011e615837565b6001600160401b03811115613fac57613fac615262565b604051908082528060200260200182016040528015613fd5578160200160208202803683370190505b50905060006040518060400160405280600f6001613ff39190615837565b6001600160401b0381111561400a5761400a615262565b604051908082528060200260200182016040528015614033578160200160208202803683370190505b5081526040805161011e8082526123e0820190925260209283019290919082016123c08036833701905050815250905060006040518060400160405280600f600161407e9190615837565b6001600160401b0381111561409557614095615262565b6040519080825280602002602001820160405280156140be578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c0803683375050509052905060006140f88c600561390e565b98509450600085600e8111156141105761411061584f565b14614128575092985096509094506145fe9350505050565b61413461010189615837565b97506141418c600561390e565b97509450600085600e8111156141595761415961584f565b14614171575092985096509094506145fe9350505050565b61417c600188615837565b965061011e88118061418e5750601e87115b156141a857506005995090975095506145fe945050505050565b6141b18c614e30565b9095509350600085600e8111156141ca576141ca61584f565b146141e2575092985096509094506145fe9350505050565b6141f0838560136000613c84565b9450600085600e8111156142065761420661584f565b1461422057506006995090975095506145fe945050505050565b600095505b61422f8789615837565b861015614428576000806142438e86615052565b9097509150600087600e81111561425c5761425c61584f565b146142765750949a5091985096506145fe95505050505050565b60108210156142ae5781868961428b8161587b565b9a508151811061429d5761429d615865565b602002602001018181525050614421565b506000601082141561434d57876142d7575060079b509299509097506145fe9650505050505050565b856142e360018a6155a7565b815181106142f3576142f3615865565b602002602001015190506143088e600261390e565b9097509250600087600e8111156143215761432161584f565b1461433b5750949a5091985096506145fe95505050505050565b614346836003615837565b91506143ad565b8160111415614361576143088e600361390e565b61436c8e600761390e565b9097509250600087600e8111156143855761438561584f565b1461439f5750949a5091985096506145fe95505050505050565b6143aa83600b615837565b91505b6143b7898b615837565b6143c1838a615837565b11156143df575060089b509299509097506145fe9650505050505050565b8115614421576143f06001836155a7565b91508086896143fe8161587b565b9a508151811061441057614410615865565b6020026020010181815250506143df565b5050614225565b836101008151811061443c5761443c615865565b6020026020010151600014156144615750600b995090975095506145fe945050505050565b61446e83858a6000613c84565b9450600085600e8111156144845761448461584f565b1415801561450e5750600185600e8111156144a1576144a161584f565b14806144be5750600285600e8111156144bc576144bc61584f565b145b8061450e57508251805160019081106144d9576144d9615865565b602002602001015183600001516000815181106144f8576144f8615865565b602002602001015161450a9190615837565b8814155b1561452857506009995090975095506145fe945050505050565b6145348285898b613c84565b9450600085600e81111561454a5761454a61584f565b141580156145d45750600185600e8111156145675761456761584f565b14806145845750600285600e8111156145825761458261584f565b145b806145d4575081518051600190811061459f5761459f615865565b602002602001015182600001516000815181106145be576145be615865565b60200260200101516145d09190615837565b8714155b156145ee5750600a995090975095506145fe945050505050565b5060009950909750955050505050505b9193909250565b6000806000806000604051806103a00160405280600361ffff168152602001600461ffff168152602001600561ffff168152602001600661ffff168152602001600761ffff168152602001600861ffff168152602001600961ffff168152602001600a61ffff168152602001600b61ffff168152602001600d61ffff168152602001600f61ffff168152602001601161ffff168152602001601361ffff168152602001601761ffff168152602001601b61ffff168152602001601f61ffff168152602001602361ffff168152602001602b61ffff168152602001603361ffff168152602001603b61ffff168152602001604361ffff168152602001605361ffff168152602001606361ffff168152602001607361ffff168152602001608361ffff16815260200160a361ffff16815260200160c361ffff16815260200160e361ffff16815260200161010261ffff1681525090506000604051806103a00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600060ff1681525090506000604051806103c00160405280600161ffff168152602001600261ffff168152602001600361ffff168152602001600461ffff168152602001600561ffff168152602001600761ffff168152602001600961ffff168152602001600d61ffff168152602001601161ffff168152602001601961ffff168152602001602161ffff168152602001603161ffff168152602001604161ffff168152602001606161ffff168152602001608161ffff16815260200160c161ffff16815260200161010161ffff16815260200161018161ffff16815260200161020161ffff16815260200161030161ffff16815260200161040161ffff16815260200161060161ffff16815260200161080161ffff168152602001610c0161ffff16815260200161100161ffff16815260200161180161ffff16815260200161200161ffff16815260200161300161ffff16815260200161400161ffff16815260200161600161ffff1681525090506000604051806103c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600660ff168152602001600660ff168152602001600760ff168152602001600760ff168152602001600860ff168152602001600860ff168152602001600960ff168152602001600960ff168152602001600a60ff168152602001600a60ff168152602001600b60ff168152602001600b60ff168152602001600c60ff168152602001600c60ff168152602001600d60ff168152602001600d60ff16815250905060005b8761010014614e1e57614b3f8c8c615052565b98509050600081600e811115614b5757614b5761584f565b14614b6b5797506105c89650505050505050565b610100881015614be1578b515160208d01511415614b94576002985050505050505050506105c8565b8760f81b8c600001518d6020015181518110614bb257614bb2615865565b60200101906001600160f81b031916908160001a90535060208c01805190614bd98261587b565b905250614b2c565b610100881115614e0c576000614bf96101018a6155a7565b9850601d8910614c1557600c99505050505050505050506105c8565b614c388d868b601d8110614c2b57614c2b615865565b602002015160ff1661390e565b9092509050600082600e811115614c5157614c5161584f565b14614c66575097506105c89650505050505050565b80868a601d8110614c7957614c79615865565b602002015161ffff16614c8c9190615837565b9750614c988d8c615052565b99509150600082600e811115614cb057614cb061584f565b14614cc5575097506105c89650505050505050565b614cdb8d848b601e8110614c2b57614c2b615865565b9092509050600082600e811115614cf457614cf461584f565b14614d09575097506105c89650505050505050565b80848a601e8110614d1c57614d1c615865565b602002015161ffff16614d2f9190615837565b96508c60200151871115614d4f57600d99505050505050505050506105c8565b8c515160208e0151614d62908a90615837565b1115614d7a57600299505050505050505050506105c8565b8715614e0657614d8b6001896155a7565b97508c60000151878e60200151614da291906155a7565b81518110614db257614db2615865565b602001015160f81c60f81b8d600001518e6020015181518110614dd757614dd7615865565b60200101906001600160f81b031916908160001a90535060208d01805190614dfe8261587b565b905250614d7a565b50614b2c565b868c602001818151614bd99190615837565b5060009b9a5050505050505050505050565b60006060818080614e44601e61011e615837565b6001600160401b03811115614e5b57614e5b615262565b604051908082528060200260200182016040528015614e84578160200160208202803683370190505b506040805161026081018252601081526011602082015260129181019190915260006060820181905260086080830152600760a0830152600960c0830152600660e0830152600a6101008301526005610120830152600b61014083015260046101608301819052600c61018084015260036101a0840152600d6101c084015260026101e0840152600e6102008401526001610220840152600f61024084015292935091614f3290899061390e565b95509150600082600e811115614f4a57614f4a61584f565b14614f5b5750969095509350505050565b614f66600486615837565b9450600093505b84841015614fef57614f8088600361390e565b84838760138110614f9357614f93615865565b602002015160ff1681518110614fab57614fab615865565b60209081029190910101529150600082600e811115614fcc57614fcc61584f565b14614fdd5750969095509350505050565b83614fe78161587b565b945050614f6d565b60138410156150425760008382866013811061500d5761500d615865565b602002015160ff168151811061502557615025615865565b60209081029190910101528361503a8161587b565b945050614fef565b5060009791965090945050505050565b600080600181808080805b600f861161514e5760006150728b600161390e565b9092509050600082600e81111561508b5761508b61584f565b146150a25750965060009550610879945050505050565b8951805196821796889081106150ba576150ba615865565b6020026020010151935083856150d09190615837565b86101561511b5760208a01516000906150e987896155a7565b6150f39086615837565b8151811061510357615103615865565b60200260200101519850985050505050505050610879565b6151258484615837565b92506151318486615837565b600196871b961b94508690506151468161587b565b96505061505d565b50600c9960009950975050505050505050565b6040518061020001604052806010906020820280368337509192915050565b60006020828403121561519257600080fd5b5035919050565b60005b838110156151b457818101518382015260200161519c565b838111156151c3576000848401525b50505050565b600081518084526151e1816020860160208601615199565b601f01601f19169290920160200192915050565b60a08152600061520860a08301886151c9565b828103602084015261521a81886151c9565b9050828103604084015261522e81876151c9565b9050828103606084015261524281866151c9565b9050828103608084015261525681856151c9565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561529a5761529a615262565b60405290565b604051601f8201601f191681016001600160401b03811182821017156152c8576152c8615262565b604052919050565b60006001600160401b038211156152e9576152e9615262565b50601f01601f191660200190565b600082601f83011261530857600080fd5b813561531b615316826152d0565b6152a0565b81815284602083860101111561533057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561535f57600080fd5b81356001600160401b038082111561537657600080fd5b908301906060828603121561538a57600080fd5b615392615278565b8235828111156153a157600080fd5b6153ad878286016152f7565b8252506020830135828111156153c257600080fd5b6153ce878286016152f7565b6020830152506040830135604082015280935050505092915050565b6040815260006153fd60408301856151c9565b8281036020840152613a5081856151c9565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061543c5761543c61540f565b92169190910692915050565b6000615456615316846152d0565b905082815283838301111561546a57600080fd5b6105c8836020830184615199565b600082601f83011261548957600080fd5b6105c883835160208501615448565b6000602082840312156154aa57600080fd5b81516001600160401b03808211156154c157600080fd5b90830190606082860312156154d557600080fd5b6154dd615278565b8251828111156154ec57600080fd5b6154f887828601615478565b82525060208301518281111561550d57600080fd5b61551987828601615478565b6020830152506040830151604082015280935050505092915050565b60008151615547818560208601615199565b9290920192915050565b60008351615563818460208801615199565b835190830190615577818360208801615199565b651e17b9bb339f60d11b9101908152600601949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156155b9576155b9615591565b500390565b600060ff8316806155d1576155d161540f565b8060ff84160691505092915050565b600063ffffffff8083168185168083038211156155ff576155ff615591565b01949350505050565b600063ffffffff8381169083168181101561562557615625615591565b039392505050565b60006020828403121561563f57600080fd5b81516001600160401b0381111561565557600080fd5b8201601f8101841361566657600080fd5b613f4784825160208401615448565b7f3c7376672076696577426f783d2730203020363430203634302720786d6c6e7381527f3d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c7360208201527f74796c653e2040666f6e742d66616365207b20666f6e742d66616d696c793a20604082015276436f7572696572466f6e743b207372633a2075726c282760481b606082015260008651615719816077850160208b01615199565b77272920666f726d617428276f70656e7479706527293b207d60401b607791840191820152865161575181608f840160208b01615199565b712e626173657b66696c7465723a75726c282360701b608f929091019182015285516157848160a1840160208a01615199565b66149db334b6361d60c91b60a192909101918201526152566158266158206157af60a8850189615535565b7f3b666f6e742d66616d696c793a436f7572696572466f6e743b666f6e742d736981527f7a653a20313670783b7d3c2f7374796c653e3c726563742077696474683d223160208201527818181291103432b4b3b43a1e911898181291103334b6361e9160391b604082015260590190565b86615535565b6401110179f160dd1b815260050190565b6000821982111561584a5761584a615591565b500190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561588f5761588f615591565b506001019056fea2646970667358221220fbffd3ec43ceb284a9d4f9407f9aaee43fc5a2ec468739c6c220fbaf4705a36664736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}