{
  "address": "0xc764c09D43765b28dA77667055AD4E30215E138C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICorruptionsFont",
          "name": "fontAddress",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData1Address",
          "type": "address"
        },
        {
          "internalType": "contract GmDataInterface",
          "name": "gmData2Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "imageName",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "compressedImage",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "compressedSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct GmDataInterface.GmDataSet",
          "name": "gmData",
          "type": "tuple"
        }
      ],
      "name": "decompress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        }
      ],
      "name": "svgRaw",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x13fe6d424e3ad00bb904b28f128399b7c0385fdee105a97d05ee6550009f56a2",
  "receipt": {
    "to": null,
    "from": "0x991daB26EDaEc88E44860bf7139D3FB178448da8",
    "contractAddress": "0xc764c09D43765b28dA77667055AD4E30215E138C",
    "transactionIndex": 20,
    "gasUsed": "2226307",
    "logsBloom": "0x
    "blockHash": "0x7d799bca47394b0cb02357e19960ecd604de5fbb97d05d97e84e2c834eed0f46",
    "transactionHash": "0x13fe6d424e3ad00bb904b28f128399b7c0385fdee105a97d05ee6550009f56a2",
    "logs": [],
    "blockNumber": 9895450,
    "cumulativeGasUsed": "4573232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x169a2877397F15Cac0a16F65Fe6468281597C744",
    "0x90485982aa897dAd73a95f1bC92558668fdDe0A8",
    "0x344C4dC97Ea62c7cEFe3d4053218F649774903b4"
  ],
  "solcInputHash": "dc95c2cef98f3491c8bd8402d314af97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICorruptionsFont\",\"name\":\"fontAddress\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData1Address\",\"type\":\"address\"},{\"internalType\":\"contract GmDataInterface\",\"name\":\"gmData2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"imageName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"compressedImage\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"compressedSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GmDataInterface.GmDataSet\",\"name\":\"gmData\",\"type\":\"tuple\"}],\"name\":\"decompress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"svgRaw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GmRenderer.sol\":\"GmRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/GmDataInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface GmDataInterface {\\n    struct GmDataSet {\\n        bytes imageName;\\n        bytes compressedImage;\\n        uint256 compressedSize;\\n    }\\n\\n    function getSvg(uint256 index) external pure returns (GmDataSet memory);\\n}\\n\",\"keccak256\":\"0x4aa3627511d193a62d7e629cc8c25bed6388e6c732ca5ba8df6b2058ebbbe064\",\"license\":\"MIT\"},\"contracts/GmRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {InflateLib} from \\\"./InflateLib.sol\\\";\\n\\nimport {GmDataInterface} from \\\"./GmDataInterface.sol\\\";\\n\\ninterface ICorruptionsFont {\\n    function font() external view returns (string memory);\\n}\\n\\ncontract GmRenderer {\\n    ICorruptionsFont private immutable font;\\n    GmDataInterface private immutable gmData1;\\n    GmDataInterface private immutable gmData2;\\n\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    constructor(\\n        ICorruptionsFont fontAddress,\\n        GmDataInterface gmData1Address,\\n        GmDataInterface gmData2Address\\n    ) {\\n        font = fontAddress;\\n        gmData1 = gmData1Address;\\n        gmData2 = gmData2Address;\\n    }\\n\\n    function decompress(GmDataInterface.GmDataSet memory gmData)\\n        public\\n        pure\\n        returns (bytes memory, bytes memory)\\n    {\\n        (, bytes memory inflated) = InflateLib.puff(\\n            gmData.compressedImage,\\n            gmData.compressedSize\\n        );\\n        return (gmData.imageName, inflated);\\n    }\\n\\n    function svgRaw(uint256 tokenId, bytes32 seed)\\n        external\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        bytes3 backgroundColor = bytes3(seed);\\n        bytes3 fontColor = bytes3(seed << 24);\\n        uint32 random = uint32(bytes4(seed << 48));\\n\\n        uint256 mod = random % 69;\\n\\n        bytes memory inner;\\n        bytes memory name;\\n        if (mod < 50) {\\n            (name, inner) = decompress(gmData1.getSvg(mod));\\n        } else {\\n            (name, inner) = decompress(gmData2.getSvg(mod));\\n        }\\n\\n        return (\\n            abi.encodePacked(\\n                svgPreambleString(backgroundColor, fontColor),\\n                inner,\\n                \\\"</svg>\\\"\\n            ),\\n            name\\n        );\\n    }\\n\\n    function toHtmlHexString(uint256 value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(7);\\n        buffer[0] = \\\"#\\\";\\n        for (uint256 i = 6; i > 0; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function svgPreambleString(bytes3 backgroundColor, bytes3 fontColor)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                \\\"<svg viewBox='0 0 640 640' width='640' height='640' xmlns='http://www.w3.org/2000/svg'>\\\",\\n                '<style> @font-face { font-family: CourierFont; src: url(\\\"',\\n                font.font(),\\n                '\\\") format(\\\"opentype\\\"); } ',\\n                \\\".base{fill:\\\",\\n                toHtmlHexString(uint256(uint24(fontColor))),\\n                \\\";font-family:CourierFont;font-size: 16px;} \\\",\\n                \\\"</style>\\\",\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',\\n                toHtmlHexString(uint256(uint24(backgroundColor))),\\n                '\\\" /> '\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xaecf101b41cf68860a9d074e4505e1a3dd1910786e46a5fa4d31f121ea983194\",\"license\":\"MIT\"},\"contracts/InflateLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//\\n// inflate content script:\\n// var pako = require('pako')\\n// var deflate = (str) => [str.length,Buffer.from(pako.deflateRaw(Buffer.from(str, 'utf-8'), {level: 9})).toString('hex')]\\n//\\n\\n/// @notice Based on https://github.com/madler/zlib/blob/master/contrib/puff\\nlibrary InflateLib {\\n    // Maximum bits in a code\\n    uint256 constant MAXBITS = 15;\\n    // Maximum number of literal/length codes\\n    uint256 constant MAXLCODES = 286;\\n    // Maximum number of distance codes\\n    uint256 constant MAXDCODES = 30;\\n    // Maximum codes lengths to read\\n    uint256 constant MAXCODES = (MAXLCODES + MAXDCODES);\\n    // Number of fixed literal/length codes\\n    uint256 constant FIXLCODES = 288;\\n\\n    // Error codes\\n    enum ErrorCode {\\n        ERR_NONE, // 0 successful inflate\\n        ERR_NOT_TERMINATED, // 1 available inflate data did not terminate\\n        ERR_OUTPUT_EXHAUSTED, // 2 output space exhausted before completing inflate\\n        ERR_INVALID_BLOCK_TYPE, // 3 invalid block type (type == 3)\\n        ERR_STORED_LENGTH_NO_MATCH, // 4 stored block length did not match one's complement\\n        ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES, // 5 dynamic block code description: too many length or distance codes\\n        ERR_CODE_LENGTHS_CODES_INCOMPLETE, // 6 dynamic block code description: code lengths codes incomplete\\n        ERR_REPEAT_NO_FIRST_LENGTH, // 7 dynamic block code description: repeat lengths with no first length\\n        ERR_REPEAT_MORE, // 8 dynamic block code description: repeat more than specified lengths\\n        ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS, // 9 dynamic block code description: invalid literal/length code lengths\\n        ERR_INVALID_DISTANCE_CODE_LENGTHS, // 10 dynamic block code description: invalid distance code lengths\\n        ERR_MISSING_END_OF_BLOCK, // 11 dynamic block code description: missing end-of-block code\\n        ERR_INVALID_LENGTH_OR_DISTANCE_CODE, // 12 invalid literal/length or distance code in fixed or dynamic block\\n        ERR_DISTANCE_TOO_FAR, // 13 distance is too far back in fixed or dynamic block\\n        ERR_CONSTRUCT // 14 internal: error in construct()\\n    }\\n\\n    // Input and output state\\n    struct State {\\n        //////////////////\\n        // Output state //\\n        //////////////////\\n        // Output buffer\\n        bytes output;\\n        // Bytes written to out so far\\n        uint256 outcnt;\\n        /////////////////\\n        // Input state //\\n        /////////////////\\n        // Input buffer\\n        bytes input;\\n        // Bytes read so far\\n        uint256 incnt;\\n        ////////////////\\n        // Temp state //\\n        ////////////////\\n        // Bit buffer\\n        uint256 bitbuf;\\n        // Number of bits in bit buffer\\n        uint256 bitcnt;\\n        //////////////////////////\\n        // Static Huffman codes //\\n        //////////////////////////\\n        Huffman lencode;\\n        Huffman distcode;\\n    }\\n\\n    // Huffman code decoding tables\\n    struct Huffman {\\n        uint256[] counts;\\n        uint256[] symbols;\\n    }\\n\\n    function bits(State memory s, uint256 need)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Bit accumulator (can use up to 20 bits)\\n        uint256 val;\\n\\n        // Load at least need bits into val\\n        val = s.bitbuf;\\n        while (s.bitcnt < need) {\\n            if (s.incnt == s.input.length) {\\n                // Out of input\\n                return (ErrorCode.ERR_NOT_TERMINATED, 0);\\n            }\\n\\n            // Load eight bits\\n            val |= uint256(uint8(s.input[s.incnt++])) << s.bitcnt;\\n            s.bitcnt += 8;\\n        }\\n\\n        // Drop need bits and update buffer, always zero to seven bits left\\n        s.bitbuf = val >> need;\\n        s.bitcnt -= need;\\n\\n        // Return need bits, zeroing the bits above that\\n        uint256 ret = (val & ((1 << need) - 1));\\n        return (ErrorCode.ERR_NONE, ret);\\n    }\\n\\n    function _stored(State memory s) private pure returns (ErrorCode) {\\n        // Length of stored block\\n        uint256 len;\\n\\n        // Discard leftover bits from current byte (assumes s.bitcnt < 8)\\n        s.bitbuf = 0;\\n        s.bitcnt = 0;\\n\\n        // Get length and check against its one's complement\\n        if (s.incnt + 4 > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        len = uint256(uint8(s.input[s.incnt++]));\\n        len |= uint256(uint8(s.input[s.incnt++])) << 8;\\n\\n        if (\\n            uint8(s.input[s.incnt++]) != (~len & 0xFF) ||\\n            uint8(s.input[s.incnt++]) != ((~len >> 8) & 0xFF)\\n        ) {\\n            // Didn't match complement!\\n            return ErrorCode.ERR_STORED_LENGTH_NO_MATCH;\\n        }\\n\\n        // Copy len bytes from in to out\\n        if (s.incnt + len > s.input.length) {\\n            // Not enough input\\n            return ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        if (s.outcnt + len > s.output.length) {\\n            // Not enough output space\\n            return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n        }\\n        while (len != 0) {\\n            // Note: Solidity reverts on underflow, so we decrement here\\n            len -= 1;\\n            s.output[s.outcnt++] = s.input[s.incnt++];\\n        }\\n\\n        // Done with a valid stored block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _decode(State memory s, Huffman memory h)\\n        private\\n        pure\\n        returns (ErrorCode, uint256)\\n    {\\n        // Current number of bits in code\\n        uint256 len;\\n        // Len bits being decoded\\n        uint256 code = 0;\\n        // First code of length len\\n        uint256 first = 0;\\n        // Number of codes of length len\\n        uint256 count;\\n        // Index of first code of length len in symbol table\\n        uint256 index = 0;\\n        // Error code\\n        ErrorCode err;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // Get next bit\\n            uint256 tempCode;\\n            (err, tempCode) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, 0);\\n            }\\n            code |= tempCode;\\n            count = h.counts[len];\\n\\n            // If length len, return symbol\\n            if (code < first + count) {\\n                return (ErrorCode.ERR_NONE, h.symbols[index + (code - first)]);\\n            }\\n            // Else update for next length\\n            index += count;\\n            first += count;\\n            first <<= 1;\\n            code <<= 1;\\n        }\\n\\n        // Ran out of codes\\n        return (ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE, 0);\\n    }\\n\\n    function _construct(\\n        Huffman memory h,\\n        uint256[] memory lengths,\\n        uint256 n,\\n        uint256 start\\n    ) private pure returns (ErrorCode) {\\n        // Current symbol when stepping through lengths[]\\n        uint256 symbol;\\n        // Current length when stepping through h.counts[]\\n        uint256 len;\\n        // Number of possible codes left of current length\\n        uint256 left;\\n        // Offsets in symbol table for each length\\n        uint256[MAXBITS + 1] memory offs;\\n\\n        // Count number of codes of each length\\n        for (len = 0; len <= MAXBITS; len++) {\\n            h.counts[len] = 0;\\n        }\\n        for (symbol = 0; symbol < n; symbol++) {\\n            // Assumes lengths are within bounds\\n            h.counts[lengths[start + symbol]]++;\\n        }\\n        // No codes!\\n        if (h.counts[0] == n) {\\n            // Complete, but decode() will fail\\n            return (ErrorCode.ERR_NONE);\\n        }\\n\\n        // Check for an over-subscribed or incomplete set of lengths\\n\\n        // One possible code of zero length\\n        left = 1;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // One more bit, double codes left\\n            left <<= 1;\\n            if (left < h.counts[len]) {\\n                // Over-subscribed--return error\\n                return ErrorCode.ERR_CONSTRUCT;\\n            }\\n            // Deduct count from possible codes\\n\\n            left -= h.counts[len];\\n        }\\n\\n        // Generate offsets into symbol table for each length for sorting\\n        offs[1] = 0;\\n        for (len = 1; len < MAXBITS; len++) {\\n            offs[len + 1] = offs[len] + h.counts[len];\\n        }\\n\\n        // Put symbols in table sorted by length, by symbol order within each length\\n        for (symbol = 0; symbol < n; symbol++) {\\n            if (lengths[start + symbol] != 0) {\\n                h.symbols[offs[lengths[start + symbol]]++] = symbol;\\n            }\\n        }\\n\\n        // Left > 0 means incomplete\\n        return left > 0 ? ErrorCode.ERR_CONSTRUCT : ErrorCode.ERR_NONE;\\n    }\\n\\n    function _codes(\\n        State memory s,\\n        Huffman memory lencode,\\n        Huffman memory distcode\\n    ) private pure returns (ErrorCode) {\\n        // Decoded symbol\\n        uint256 symbol;\\n        // Length for copy\\n        uint256 len;\\n        // Distance for copy\\n        uint256 dist;\\n        // TODO Solidity doesn't support constant arrays, but these are fixed at compile-time\\n        // Size base for length codes 257..285\\n        uint16[29] memory lens =\\n            [\\n                3,\\n                4,\\n                5,\\n                6,\\n                7,\\n                8,\\n                9,\\n                10,\\n                11,\\n                13,\\n                15,\\n                17,\\n                19,\\n                23,\\n                27,\\n                31,\\n                35,\\n                43,\\n                51,\\n                59,\\n                67,\\n                83,\\n                99,\\n                115,\\n                131,\\n                163,\\n                195,\\n                227,\\n                258\\n            ];\\n        // Extra bits for length codes 257..285\\n        uint8[29] memory lext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                1,\\n                1,\\n                2,\\n                2,\\n                2,\\n                2,\\n                3,\\n                3,\\n                3,\\n                3,\\n                4,\\n                4,\\n                4,\\n                4,\\n                5,\\n                5,\\n                5,\\n                5,\\n                0\\n            ];\\n        // Offset base for distance codes 0..29\\n        uint16[30] memory dists =\\n            [\\n                1,\\n                2,\\n                3,\\n                4,\\n                5,\\n                7,\\n                9,\\n                13,\\n                17,\\n                25,\\n                33,\\n                49,\\n                65,\\n                97,\\n                129,\\n                193,\\n                257,\\n                385,\\n                513,\\n                769,\\n                1025,\\n                1537,\\n                2049,\\n                3073,\\n                4097,\\n                6145,\\n                8193,\\n                12289,\\n                16385,\\n                24577\\n            ];\\n        // Extra bits for distance codes 0..29\\n        uint8[30] memory dext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                2,\\n                2,\\n                3,\\n                3,\\n                4,\\n                4,\\n                5,\\n                5,\\n                6,\\n                6,\\n                7,\\n                7,\\n                8,\\n                8,\\n                9,\\n                9,\\n                10,\\n                10,\\n                11,\\n                11,\\n                12,\\n                12,\\n                13,\\n                13\\n            ];\\n        // Error code\\n        ErrorCode err;\\n\\n        // Decode literals and length/distance pairs\\n        while (symbol != 256) {\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return err;\\n            }\\n\\n            if (symbol < 256) {\\n                // Literal: symbol is the byte\\n                // Write out the literal\\n                if (s.outcnt == s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                s.output[s.outcnt] = bytes1(uint8(symbol));\\n                s.outcnt++;\\n            } else if (symbol > 256) {\\n                uint256 tempBits;\\n                // Length\\n                // Get and compute length\\n                symbol -= 257;\\n                if (symbol >= 29) {\\n                    // Invalid fixed code\\n                    return ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE;\\n                }\\n\\n                (err, tempBits) = bits(s, lext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                len = lens[symbol] + tempBits;\\n\\n                // Get and check distance\\n                (err, symbol) = _decode(s, distcode);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    // Invalid symbol\\n                    return err;\\n                }\\n                (err, tempBits) = bits(s, dext[symbol]);\\n                if (err != ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                dist = dists[symbol] + tempBits;\\n                if (dist > s.outcnt) {\\n                    // Distance too far back\\n                    return ErrorCode.ERR_DISTANCE_TOO_FAR;\\n                }\\n\\n                // Copy length bytes from distance bytes back\\n                if (s.outcnt + len > s.output.length) {\\n                    return ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                while (len != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    len -= 1;\\n                    s.output[s.outcnt] = s.output[s.outcnt - dist];\\n                    s.outcnt++;\\n                }\\n            } else {\\n                s.outcnt += len;\\n            }\\n        }\\n\\n        // Done with a valid fixed or dynamic block\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _build_fixed(State memory s) private pure returns (ErrorCode) {\\n        // Build fixed Huffman tables\\n        // TODO this is all a compile-time constant\\n        uint256 symbol;\\n        uint256[] memory lengths = new uint256[](FIXLCODES);\\n\\n        // Literal/length table\\n        for (symbol = 0; symbol < 144; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n        for (; symbol < 256; symbol++) {\\n            lengths[symbol] = 9;\\n        }\\n        for (; symbol < 280; symbol++) {\\n            lengths[symbol] = 7;\\n        }\\n        for (; symbol < FIXLCODES; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n\\n        _construct(s.lencode, lengths, FIXLCODES, 0);\\n\\n        // Distance table\\n        for (symbol = 0; symbol < MAXDCODES; symbol++) {\\n            lengths[symbol] = 5;\\n        }\\n\\n        _construct(s.distcode, lengths, MAXDCODES, 0);\\n\\n        return ErrorCode.ERR_NONE;\\n    }\\n\\n    function _fixed(State memory s) private pure returns (ErrorCode) {\\n        // Decode data until end-of-block code\\n        return _codes(s, s.lencode, s.distcode);\\n    }\\n\\n    function _build_dynamic_lengths(State memory s)\\n        private\\n        pure\\n        returns (ErrorCode, uint256[] memory)\\n    {\\n        uint256 ncode;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Error code\\n        ErrorCode err;\\n        // Permutation of code length codes\\n        uint8[19] memory order =\\n            [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\\n\\n        (err, ncode) = bits(s, 4);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lengths);\\n        }\\n        ncode += 4;\\n\\n        // Read code length code lengths (really), missing lengths are zero\\n        for (index = 0; index < ncode; index++) {\\n            (err, lengths[order[index]]) = bits(s, 3);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, lengths);\\n            }\\n        }\\n        for (; index < 19; index++) {\\n            lengths[order[index]] = 0;\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lengths);\\n    }\\n\\n    function _build_dynamic(State memory s)\\n        private\\n        pure\\n        returns (\\n            ErrorCode,\\n            Huffman memory,\\n            Huffman memory\\n        )\\n    {\\n        // Number of lengths in descriptor\\n        uint256 nlen;\\n        uint256 ndist;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Error code\\n        ErrorCode err;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Length and distance codes\\n        Huffman memory lencode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXLCODES));\\n        Huffman memory distcode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES));\\n        uint256 tempBits;\\n\\n        // Get number of lengths in each table, check lengths\\n        (err, nlen) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        nlen += 257;\\n        (err, ndist) = bits(s, 5);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        ndist += 1;\\n\\n        if (nlen > MAXLCODES || ndist > MAXDCODES) {\\n            // Bad counts\\n            return (\\n                ErrorCode.ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        (err, lengths) = _build_dynamic_lengths(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n\\n        // Build huffman table for code lengths codes (use lencode temporarily)\\n        err = _construct(lencode, lengths, 19, 0);\\n        if (err != ErrorCode.ERR_NONE) {\\n            // Require complete code set here\\n            return (\\n                ErrorCode.ERR_CODE_LENGTHS_CODES_INCOMPLETE,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Read length/literal and distance code length tables\\n        index = 0;\\n        while (index < nlen + ndist) {\\n            // Decoded value\\n            uint256 symbol;\\n            // Last length to repeat\\n            uint256 len;\\n\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return (err, lencode, distcode);\\n            }\\n\\n            if (symbol < 16) {\\n                // Length in 0..15\\n                lengths[index++] = symbol;\\n            } else {\\n                // Repeat instruction\\n                // Assume repeating zeros\\n                len = 0;\\n                if (symbol == 16) {\\n                    // Repeat last length 3..6 times\\n                    if (index == 0) {\\n                        // No last length!\\n                        return (\\n                            ErrorCode.ERR_REPEAT_NO_FIRST_LENGTH,\\n                            lencode,\\n                            distcode\\n                        );\\n                    }\\n                    // Last length\\n                    len = lengths[index - 1];\\n                    (err, tempBits) = bits(s, 2);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else if (symbol == 17) {\\n                    // Repeat zero 3..10 times\\n                    (err, tempBits) = bits(s, 3);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else {\\n                    // == 18, repeat zero 11..138 times\\n                    (err, tempBits) = bits(s, 7);\\n                    if (err != ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 11 + tempBits;\\n                }\\n\\n                if (index + symbol > nlen + ndist) {\\n                    // Too many lengths!\\n                    return (ErrorCode.ERR_REPEAT_MORE, lencode, distcode);\\n                }\\n                while (symbol != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    symbol -= 1;\\n\\n                    // Repeat last or zero symbol times\\n                    lengths[index++] = len;\\n                }\\n            }\\n        }\\n\\n        // Check for end-of-block code -- there better be one!\\n        if (lengths[256] == 0) {\\n            return (ErrorCode.ERR_MISSING_END_OF_BLOCK, lencode, distcode);\\n        }\\n\\n        // Build huffman table for literal/length codes\\n        err = _construct(lencode, lengths, nlen, 0);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                nlen != lencode.counts[0] + lencode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Build huffman table for distance codes\\n        err = _construct(distcode, lengths, ndist, nlen);\\n        if (\\n            err != ErrorCode.ERR_NONE &&\\n            (err == ErrorCode.ERR_NOT_TERMINATED ||\\n                err == ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                ndist != distcode.counts[0] + distcode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                ErrorCode.ERR_INVALID_DISTANCE_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        return (ErrorCode.ERR_NONE, lencode, distcode);\\n    }\\n\\n    function _dynamic(State memory s) private pure returns (ErrorCode) {\\n        // Length and distance codes\\n        Huffman memory lencode;\\n        Huffman memory distcode;\\n        // Error code\\n        ErrorCode err;\\n\\n        (err, lencode, distcode) = _build_dynamic(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return err;\\n        }\\n\\n        // Decode data until end-of-block code\\n        return _codes(s, lencode, distcode);\\n    }\\n\\n    function puff(bytes memory source, uint256 destlen)\\n        internal\\n        pure\\n        returns (ErrorCode, bytes memory)\\n    {\\n        // Input/output state\\n        State memory s =\\n            State(\\n                new bytes(destlen),\\n                0,\\n                source,\\n                0,\\n                0,\\n                0,\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](FIXLCODES)),\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES))\\n            );\\n        // Temp: last bit\\n        uint256 last;\\n        // Temp: block type bit\\n        uint256 t;\\n        // Error code\\n        ErrorCode err;\\n\\n        // Build fixed Huffman tables\\n        err = _build_fixed(s);\\n        if (err != ErrorCode.ERR_NONE) {\\n            return (err, s.output);\\n        }\\n\\n        // Process blocks until last block or error\\n        while (last == 0) {\\n            // One if last block\\n            (err, last) = bits(s, 1);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            // Block type 0..3\\n            (err, t) = bits(s, 2);\\n            if (err != ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            err = (\\n                t == 0\\n                    ? _stored(s)\\n                    : (\\n                        t == 1\\n                            ? _fixed(s)\\n                            : (\\n                                t == 2\\n                                    ? _dynamic(s)\\n                                    : ErrorCode.ERR_INVALID_BLOCK_TYPE\\n                            )\\n                    )\\n            );\\n            // type == 3, invalid\\n\\n            if (err != ErrorCode.ERR_NONE) {\\n                // Return with error\\n                break;\\n            }\\n        }\\n\\n        return (err, s.output);\\n    }\\n}\\n\",\"keccak256\":\"0x30e7ed53c66fef1587d3e47587193272dd6184ed1010bb0418aa8de041818ef5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806390accf561461003b5780639ab440b414610065575b600080fd5b61004e610049366004612199565b610078565b60405161005c929190612292565b60405180910390f35b61004e6100733660046122b7565b610099565b606080600061008f8460200151856040015161020b565b9451959350505050565b60608082601881901b63ffffffff60b083901c1660006100ba6045836122d9565b63ffffffff16905060608060328310156101785760405163586e3c7d60e11b81526004810184905261016f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa906024015b60006040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610049919081019061235a565b925090506101ce565b60405163586e3c7d60e11b8152600481018490526101c9907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0dc78fa9060240161011b565b925090505b6101d886866104ba565b826040516020016101ea929190612413565b60408051601f198184030181529190529750955050505050505b9250929050565b600060606000604051806101000160405280856001600160401b03811115610235576102356120ae565b6040519080825280601f01601f19166020018201604052801561025f576020820181803683370190505b508152602001600081526020018681526020016000815260200160008152602001600081526020016040518060400160405280600f60016102a09190612469565b6001600160401b038111156102b7576102b76120ae565b6040519080825280602002602001820160405280156102e0578160200160208202803683370190505b5081526040805161012080825261242082019092526020928301929091908201612400803683370190505081525081526020016040518060400160405280600f600161032c9190612469565b6001600160401b03811115610343576103436120ae565b60405190808252806020026020018201604052801561036c578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c080368337505050905290529050600080806103a884610594565b9050600081600e8111156103be576103be612481565b146103d3579251929450919250610204915050565b826104aa576103e384600161071e565b93509050600081600e8111156103fb576103fb612481565b14610410579251929450919250610204915050565b61041b84600261071e565b92509050600081600e81111561043357610433612481565b14610448579251929450919250610204915050565b811561047c57816001146104735781600214610465576003610485565b61046e846107ef565b610485565b61046e84610869565b61048584610884565b9050600081600e81111561049b5761049b612481565b146104a5576104aa565b6103d3565b9251929792965091945050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d37bc7c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561051557600080fd5b505afa158015610529573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105519190810190612497565b61055e60e884901c610a94565b61056b60e886901c610a94565b60405160200161057d939291906124df565b604051602081830303815290604052905092915050565b604080516101208082526124208201909252600091829182916020820161240080368337019050509050600091505b60908210156105fd5760088183815181106105e0576105e06126a9565b6020908102919091010152816105f5816126bf565b9250506105c3565b61010082101561063857600981838151811061061b5761061b6126a9565b602090810291909101015281610630816126bf565b9250506105fd565b610118821015610673576007818381518110610656576106566126a9565b60209081029190910101528161066b816126bf565b925050610638565b6101208210156106ae576008818381518110610691576106916126a9565b6020908102919091010152816106a6816126bf565b925050610673565b6106c18460c00151826101206000610bb0565b50600091505b601e8210156107015760058183815181106106e4576106e46126a9565b6020908102919091010152816106f9816126bf565b9250506106c7565b6107138460e0015182601e6000610bb0565b506000949350505050565b608082015160009081905b838560a0015110156107b2578460400151518560600151141561075457600160009250925050610204565b60a085015160408601516060870180519061076e826126bf565b905281518110610780576107806126a9565b602001015160f81c60f81b60f81c60ff16901b8117905060088560a0018181516107aa9190612469565b905250610729565b80841c608086015260a0850180518591906107ce9083906126da565b90525060006107e0600180871b6126da565b60009792169550909350505050565b600061080e604051806040016040528060608152602001606081525090565b6040805180820190915260608082526020820152600061082d85610e7b565b90945092509050600081600e81111561084857610848612481565b1461085557949350505050565b610860858484611531565b95945050505050565b600061087e828360c001518460e00151611531565b92915050565b60006080820181905260a0820181905260408201515160608301518291906108ad906004612469565b11156108bc5750600192915050565b6040830151606084018051906108d1826126bf565b9052815181106108e3576108e36126a9565b0160200151604084015160608501805160f89390931c935060089290610908826126bf565b90528151811061091a5761091a6126a9565b602001015160f81c60f81b60f81c60ff16901b81179050801960ff16836040015184606001805180919061094d906126bf565b90528151811061095f5761095f6126a9565b016020015160f81c1415806109aa5750604083015160608401805160ff841960081c16929161098d826126bf565b90528151811061099f5761099f6126a9565b016020015160f81c14155b156109b85750600492915050565b8260400151518184606001516109ce9190612469565b11156109dd5750600192915050565b82515160208401516109f0908390612469565b11156109ff5750600292915050565b8015610a8b57610a106001826126da565b90508260400151836060018051809190610a29906126bf565b905281518110610a3b57610a3b6126a9565b602001015160f81c60f81b8360000151846020018051809190610a5d906126bf565b905281518110610a6f57610a6f6126a9565b60200101906001600160f81b031916908160001a9053506109ff565b50600092915050565b60408051600780825281830190925260609160009190602082018180368337019050509050602360f81b81600081518110610ad157610ad16126a9565b60200101906001600160f81b031916908160001a90535060065b8015610b5d576f181899199a1a9b1b9c1cb0b131b232b360811b84600f1660108110610b1957610b196126a9565b1a60f81b828281518110610b2f57610b2f6126a9565b60200101906001600160f81b031916908160001a90535060049390931c92610b56816126f1565b9050610aeb565b50821561087e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b600080600080610bbe61208f565b600092505b600f8311610c0057600089600001518481518110610be357610be36126a9565b602090810291909101015282610bf8816126bf565b935050610bc3565b600093505b86841015610c6c57885188610c1a8689612469565b81518110610c2a57610c2a6126a9565b602002602001015181518110610c4257610c426126a9565b602002602001018051809190610c57906126bf565b90525083610c64816126bf565b945050610c05565b868960000151600081518110610c8457610c846126a9565b60200260200101511415610c9f576000945050505050610e73565b60019150600192505b600f8311610d22578851805160019390931b9284908110610ccb57610ccb6126a9565b6020026020010151821015610ce757600e945050505050610e73565b8851805184908110610cfb57610cfb6126a9565b602002602001015182610d0e91906126da565b915082610d1a816126bf565b935050610ca8565b60006020820152600192505b600f831015610da7578851805184908110610d4b57610d4b6126a9565b6020026020010151818460108110610d6557610d656126a9565b6020020151610d749190612469565b81610d80856001612469565b60108110610d9057610d906126a9565b602002015282610d9f816126bf565b935050610d2e565b600093505b86841015610e5a5787610dbf8588612469565b81518110610dcf57610dcf6126a9565b6020026020010151600014610e485760208901518490828a610df1848b612469565b81518110610e0157610e016126a9565b602002602001015160108110610e1957610e196126a9565b60200201805190610e29826126bf565b905281518110610e3b57610e3b6126a9565b6020026020010181815250505b83610e52816126bf565b945050610dac565b60008211610e69576000610e6c565b600e5b9450505050505b949350505050565b6000610e9a604051806040016040528060608152602001606081525090565b6040805180820190915260608082526020820152600080808080610ec1601e61011e612469565b6001600160401b03811115610ed857610ed86120ae565b604051908082528060200260200182016040528015610f01578160200160208202803683370190505b50905060006040518060400160405280600f6001610f1f9190612469565b6001600160401b03811115610f3657610f366120ae565b604051908082528060200260200182016040528015610f5f578160200160208202803683370190505b5081526040805161011e8082526123e0820190925260209283019290919082016123c08036833701905050815250905060006040518060400160405280600f6001610faa9190612469565b6001600160401b03811115610fc157610fc16120ae565b604051908082528060200260200182016040528015610fea578160200160208202803683370190505b50815260408051601e8082526103e0820190925260209283019290919082016103c0803683375050509052905060006110248c600561071e565b98509450600085600e81111561103c5761103c612481565b146110545750929850965090945061152a9350505050565b61106061010189612469565b975061106d8c600561071e565b97509450600085600e81111561108557611085612481565b1461109d5750929850965090945061152a9350505050565b6110a8600188612469565b965061011e8811806110ba5750601e87115b156110d4575060059950909750955061152a945050505050565b6110dd8c611d5e565b9095509350600085600e8111156110f6576110f6612481565b1461110e5750929850965090945061152a9350505050565b61111c838560136000610bb0565b9450600085600e81111561113257611132612481565b1461114c575060069950909750955061152a945050505050565b600095505b61115b8789612469565b8610156113545760008061116f8e86611f80565b9097509150600087600e81111561118857611188612481565b146111a25750949a50919850965061152a95505050505050565b60108210156111da578186896111b7816126bf565b9a50815181106111c9576111c96126a9565b60200260200101818152505061134d565b50600060108214156112795787611203575060079b5092995090975061152a9650505050505050565b8561120f60018a6126da565b8151811061121f5761121f6126a9565b602002602001015190506112348e600261071e565b9097509250600087600e81111561124d5761124d612481565b146112675750949a50919850965061152a95505050505050565b611272836003612469565b91506112d9565b816011141561128d576112348e600361071e565b6112988e600761071e565b9097509250600087600e8111156112b1576112b1612481565b146112cb5750949a50919850965061152a95505050505050565b6112d683600b612469565b91505b6112e3898b612469565b6112ed838a612469565b111561130b575060089b5092995090975061152a9650505050505050565b811561134d5761131c6001836126da565b915080868961132a816126bf565b9a508151811061133c5761133c6126a9565b60200260200101818152505061130b565b5050611151565b8361010081518110611368576113686126a9565b60200260200101516000141561138d5750600b9950909750955061152a945050505050565b61139a83858a6000610bb0565b9450600085600e8111156113b0576113b0612481565b1415801561143a5750600185600e8111156113cd576113cd612481565b14806113ea5750600285600e8111156113e8576113e8612481565b145b8061143a5750825180516001908110611405576114056126a9565b60200260200101518360000151600081518110611424576114246126a9565b60200260200101516114369190612469565b8814155b15611454575060099950909750955061152a945050505050565b6114608285898b610bb0565b9450600085600e81111561147657611476612481565b141580156115005750600185600e81111561149357611493612481565b14806114b05750600285600e8111156114ae576114ae612481565b145b8061150057508151805160019081106114cb576114cb6126a9565b602002602001015182600001516000815181106114ea576114ea6126a9565b60200260200101516114fc9190612469565b8714155b1561151a5750600a9950909750955061152a945050505050565b5060009950909750955050505050505b9193909250565b6000806000806000604051806103a00160405280600361ffff168152602001600461ffff168152602001600561ffff168152602001600661ffff168152602001600761ffff168152602001600861ffff168152602001600961ffff168152602001600a61ffff168152602001600b61ffff168152602001600d61ffff168152602001600f61ffff168152602001601161ffff168152602001601361ffff168152602001601761ffff168152602001601b61ffff168152602001601f61ffff168152602001602361ffff168152602001602b61ffff168152602001603361ffff168152602001603b61ffff168152602001604361ffff168152602001605361ffff168152602001606361ffff168152602001607361ffff168152602001608361ffff16815260200160a361ffff16815260200160c361ffff16815260200160e361ffff16815260200161010261ffff1681525090506000604051806103a00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600060ff1681525090506000604051806103c00160405280600161ffff168152602001600261ffff168152602001600361ffff168152602001600461ffff168152602001600561ffff168152602001600761ffff168152602001600961ffff168152602001600d61ffff168152602001601161ffff168152602001601961ffff168152602001602161ffff168152602001603161ffff168152602001604161ffff168152602001606161ffff168152602001608161ffff16815260200160c161ffff16815260200161010161ffff16815260200161018161ffff16815260200161020161ffff16815260200161030161ffff16815260200161040161ffff16815260200161060161ffff16815260200161080161ffff168152602001610c0161ffff16815260200161100161ffff16815260200161180161ffff16815260200161200161ffff16815260200161300161ffff16815260200161400161ffff16815260200161600161ffff1681525090506000604051806103c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600160ff168152602001600160ff168152602001600260ff168152602001600260ff168152602001600360ff168152602001600360ff168152602001600460ff168152602001600460ff168152602001600560ff168152602001600560ff168152602001600660ff168152602001600660ff168152602001600760ff168152602001600760ff168152602001600860ff168152602001600860ff168152602001600960ff168152602001600960ff168152602001600a60ff168152602001600a60ff168152602001600b60ff168152602001600b60ff168152602001600c60ff168152602001600c60ff168152602001600d60ff168152602001600d60ff16815250905060005b8761010014611d4a57611a6b8c8c611f80565b98509050600081600e811115611a8357611a83612481565b14611a97579750611d579650505050505050565b610100881015611b0d578b515160208d01511415611ac057600298505050505050505050611d57565b8760f81b8c600001518d6020015181518110611ade57611ade6126a9565b60200101906001600160f81b031916908160001a90535060208c01805190611b05826126bf565b905250611a58565b610100881115611d38576000611b256101018a6126da565b9850601d8910611b4157600c9950505050505050505050611d57565b611b648d868b601d8110611b5757611b576126a9565b602002015160ff1661071e565b9092509050600082600e811115611b7d57611b7d612481565b14611b9257509750611d579650505050505050565b80868a601d8110611ba557611ba56126a9565b602002015161ffff16611bb89190612469565b9750611bc48d8c611f80565b99509150600082600e811115611bdc57611bdc612481565b14611bf157509750611d579650505050505050565b611c078d848b601e8110611b5757611b576126a9565b9092509050600082600e811115611c2057611c20612481565b14611c3557509750611d579650505050505050565b80848a601e8110611c4857611c486126a9565b602002015161ffff16611c5b9190612469565b96508c60200151871115611c7b57600d9950505050505050505050611d57565b8c515160208e0151611c8e908a90612469565b1115611ca65760029950505050505050505050611d57565b8715611d3257611cb76001896126da565b97508c60000151878e60200151611cce91906126da565b81518110611cde57611cde6126a9565b602001015160f81c60f81b8d600001518e6020015181518110611d0357611d036126a9565b60200101906001600160f81b031916908160001a90535060208d01805190611d2a826126bf565b905250611ca6565b50611a58565b868c602001818151611b059190612469565b6000985050505050505050505b9392505050565b60006060818080611d72601e61011e612469565b6001600160401b03811115611d8957611d896120ae565b604051908082528060200260200182016040528015611db2578160200160208202803683370190505b506040805161026081018252601081526011602082015260129181019190915260006060820181905260086080830152600760a0830152600960c0830152600660e0830152600a6101008301526005610120830152600b61014083015260046101608301819052600c61018084015260036101a0840152600d6101c084015260026101e0840152600e6102008401526001610220840152600f61024084015292935091611e6090899061071e565b95509150600082600e811115611e7857611e78612481565b14611e895750969095509350505050565b611e94600486612469565b9450600093505b84841015611f1d57611eae88600361071e565b84838760138110611ec157611ec16126a9565b602002015160ff1681518110611ed957611ed96126a9565b60209081029190910101529150600082600e811115611efa57611efa612481565b14611f0b5750969095509350505050565b83611f15816126bf565b945050611e9b565b6013841015611f7057600083828660138110611f3b57611f3b6126a9565b602002015160ff1681518110611f5357611f536126a9565b602090810291909101015283611f68816126bf565b945050611f1d565b5060009791965090945050505050565b600080600181808080805b600f861161207c576000611fa08b600161071e565b9092509050600082600e811115611fb957611fb9612481565b14611fd05750965060009550610204945050505050565b895180519682179688908110611fe857611fe86126a9565b602002602001015193508385611ffe9190612469565b8610156120495760208a015160009061201787896126da565b6120219086612469565b81518110612031576120316126a9565b60200260200101519850985050505050505050610204565b6120538484612469565b925061205f8486612469565b600196871b961b9450869050612074816126bf565b965050611f8b565b50600c9960009950975050505050505050565b6040518061020001604052806010906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156120e6576120e66120ae565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612114576121146120ae565b604052919050565b60006001600160401b03821115612135576121356120ae565b50601f01601f191660200190565b600082601f83011261215457600080fd5b81356121676121628261211c565b6120ec565b81815284602083860101111561217c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156121ab57600080fd5b81356001600160401b03808211156121c257600080fd5b90830190606082860312156121d657600080fd5b6121de6120c4565b8235828111156121ed57600080fd5b6121f987828601612143565b82525060208301358281111561220e57600080fd5b61221a87828601612143565b6020830152506040830135604082015280935050505092915050565b60005b83811015612251578181015183820152602001612239565b83811115612260576000848401525b50505050565b6000815180845261227e816020860160208601612236565b601f01601f19169290920160200192915050565b6040815260006122a56040830185612266565b82810360208401526108608185612266565b600080604083850312156122ca57600080fd5b50508035926020909101359150565b600063ffffffff808416806122fe57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b60006123186121628461211c565b905082815283838301111561232c57600080fd5b611d57836020830184612236565b600082601f83011261234b57600080fd5b611d578383516020850161230a565b60006020828403121561236c57600080fd5b81516001600160401b038082111561238357600080fd5b908301906060828603121561239757600080fd5b61239f6120c4565b8251828111156123ae57600080fd5b6123ba8782860161233a565b8252506020830151828111156123cf57600080fd5b6123db8782860161233a565b6020830152506040830151604082015280935050505092915050565b60008151612409818560208601612236565b9290920192915050565b60008351612425818460208801612236565b835190830190612439818360208801612236565b651e17b9bb339f60d11b9101908152600601949350505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561247c5761247c612453565b500190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156124a957600080fd5b81516001600160401b038111156124bf57600080fd5b8201601f810184136124d057600080fd5b610e738482516020840161230a565b7f3c7376672076696577426f783d2730203020363430203634302720776964746881527f3d2736343027206865696768743d273634302720786d6c6e733d27687474703a6020820152761797bbbbbb973b999737b933979918181817b9bb33939f60491b60408201527f3c7374796c653e2040666f6e742d66616365207b20666f6e742d66616d696c796057820152781d1021b7bab934b2b92337b73a1d9039b9319d103ab936141160391b6077820152600084516125a5816090850160208901612236565b7801114903337b936b0ba141137b832b73a3cb83291149d903e9603d1b6090918401918201526a173130b9b2bdb334b6361d60a91b60a982015284516125f28160b4840160208901612236565b7f3b666f6e742d66616d696c793a436f7572696572466f6e743b666f6e742d7369910160b48101919091526a03d329d10189b383c1dbe960ad1b60d4820152671e17b9ba3cb6329f60c11b60df82015261269f61268e61268860e784017f3c726563742077696474683d223130302522206865696768743d223130302522815266103334b6361e9160c91b602082015260270190565b866123f7565b6401110179f160dd1b815260050190565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156126d3576126d3612453565b5060010190565b6000828210156126ec576126ec612453565b500390565b60008161270057612700612453565b50600019019056fea2646970667358221220009a24abb8963a3a9eacaabcb8cc47d2cf2b9cd305d6e11e41d94662b585a61664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}