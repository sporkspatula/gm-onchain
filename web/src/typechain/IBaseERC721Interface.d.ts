/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IBaseERC721InterfaceInterface extends ethers.utils.Interface {
  functions: {
    "__burn(uint256)": FunctionFragment;
    "__exists(uint256)": FunctionFragment;
    "__isApprovedForAll(address,address)": FunctionFragment;
    "__isApprovedOrOwner(address,uint256)": FunctionFragment;
    "__mint(address,uint256)": FunctionFragment;
    "__owner()": FunctionFragment;
    "__setBaseURI(string,string)": FunctionFragment;
    "__tokenURI(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__burn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "__isApprovedOrOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "__owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__setBaseURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "__tokenURI",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "__burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__setBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__tokenURI", data: BytesLike): Result;

  events: {};
}

export class IBaseERC721Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBaseERC721InterfaceInterface;

  functions: {
    __burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    __isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    __isApprovedOrOwner(
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    __mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __owner(overrides?: CallOverrides): Promise<[string]>;

    __setBaseURI(
      base: string,
      extension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  __burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  __isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  __isApprovedOrOwner(
    spender: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  __mint(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __owner(overrides?: CallOverrides): Promise<string>;

  __setBaseURI(
    base: string,
    extension: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    __exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    __isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    __isApprovedOrOwner(
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    __mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __owner(overrides?: CallOverrides): Promise<string>;

    __setBaseURI(
      base: string,
      extension: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    __burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __isApprovedOrOwner(
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __owner(overrides?: CallOverrides): Promise<BigNumber>;

    __setBaseURI(
      base: string,
      extension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __isApprovedOrOwner(
      spender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __setBaseURI(
      base: string,
      extension: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
